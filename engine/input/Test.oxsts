package Test

enum Kind {
    None, Asd
}

type AType {
    var x : Integer
}

type Adder {
    var x : Integer := 1
    var y : Kind

    init {
        x := 0
    }

    tran sequential {
        x := 200
        assume (x = 20)
    }

    tran choiceial {
        x := 100
        assume (x = 10)
    }

    tran {
        x := x + 1
    }
}

type Holder {
    feature adder : Adder[0..*]

    instance a :> adder : Adder
    instance b :> adder : Adder

    var h : Boolean := false

    tran {
        inline seq adder -> sequential
    }

    tran test(aInstance: AType) {
        aInstance.x := 10
    }

    init {
        inline seq adder -> sequential

        inline choice adder -> choiceial else {
            h := true
        }
    }
}

target Mission {
    var c : Integer

    instance holder : Holder

    instance aType : AType

    init {
        //inline holder.init()
        assume (false)
    }

    tran {
        inline holder.test(aType)
    } /*or {
        inline holder.main()
    }*/

    prop {
        holder.a.x = 10
    }
}

target SpecificMission : Mission {

}
