package Test

// Event.oxsts

type Event {
    var isActive: Boolean = false

    tran set {
        isActive := true
    }

    tran reset {
        isActive := false
    }

    havoc {
        havoc (isActive)
    }

    tran isSet {
        assume (isActive)
    }
}

type Timeout {
    var deltaTime : Integer = 0 - 1

    tran {
        if (deltaTime >= 0) {
            deltaTime := deltaTime - 1
        }
    }

    tran isUp {
        assume (deltaTime == 0)
    }
}

// Trigger.oxsts

type Trigger {
    virtual tran isTriggered { }
}

type EventTrigger : Trigger {
    reference event : Event[1..1]

    override tran isTriggered {
        inline event.isSet()
    }
}

type TimeoutTrigger : Trigger {
    reference timeout : Timeout[1..1]

    override tran isTriggered {
        inline timeout.isUp()
    }
}

// Action.oxsts

type Action {
    virtual tran { }
}

type RaiseEventAction : Action {
    reference event : Event[1..1]

    override tran {
        inline event.set()
    }
}

type SetTimeoutAction : Action {
    reference timeout : Timeout[1..1]
    reference amount : Integer = 1

    override tran {
        timeout.deltaTime := amount
    }
}

// Component.oxsts

type Component {
    virtual init { }
    virtual tran { }
}

type Channel {
    reference inputEvent : Event
    reference outputEvent : Event

    tran {
        if (inputEvent.isActive) {
            inline outputEvent.set()
        }
    }
}

type CompositeComponent : Component {
    feature components : Component
    feature channels : Channel
}

type SyncComponent : CompositeComponent {
    override init {
        inline seq components -> init
    }

    override tran {
        inline seq components -> main
        inline seq channels -> main
    }
}

// Statechart.oxsts

type Statechart : Component {
    feature events : Event[0..*]
    feature inputEvents :> events : Event[0..*]
    feature outputEvents :> events : Event[0..*]

    feature timeouts : Timeout[0..*]

    feature regions : Region[0..*]

    override init {
        inline seq regions -> activateRecursive
    }

    override tran {
        inline seq outputEvents -> reset
        inline choice regions -> fireTransitions else { }
        inline seq inputEvents -> reset
        inline seq timeouts -> main
    }
}

type Region {
    feature states : State[0..*]

    var activeState : states[0..1] = Nothing

    feature abstractTransitions : AbstractTransition[0..*]

    feature transitions :> abstractTransitions : Transition[0..*]
    feature entryTransitions :> abstractTransitions : EntryTransition[0..*]

    tran activateRecursive {
        inline seq entryTransitions -> main
    }

    tran deactivateRecursive {
        inline seq states -> deactivateRecursive
    }

    tran fireTransitions {
        inline choice transitions -> main else {
            inline choice states -> fireTransitions
        }
    }

    tran fireTransitionsInner {
        inline choice transitions -> main
    }
}

type State {
    reference parent : Region[0..1]
    reference parentState : State[0..1]
    feature regions : Region[0..1]

    feature entryActions : Action[0..*]
    feature exitActions : Action[0..*]

    tran isActive {
        assume (parent.activeState == Self)
    }

    tran deactivateRecursive {
        inline seq regions -> deactivateRecursive

        if (parent.activeState == Self) {
            parent.activeState := Nothing
            inline seq exitActions -> main
        }
    }

    tran exitRecursive(commonRegion : Region) {
        inline seq exitActions -> main

        parent.activeState := Nothing

        inline if (commonRegion != parent) {
            inline parentState.exitRecursive(commonRegion)
        }
    }

    tran exit(commonRegion : Region) {
        inline exitRecursive(commonRegion)

        inline seq regions -> deactivateRecursive
    }

    tran enterRecursive(commonRegion : Region) {
        inline if (commonRegion != parent) {
            inline parentState.enterRecursive(commonRegion)
        }

        parent.activeState := Self

        inline seq entryActions -> main
    }

    tran enter(commonRegion : Region) {
        inline enterRecursive(commonRegion)

        inline seq regions -> activateRecursive
    }

    tran fireTransitions {
        inline seq regions -> fireTransitionsInner
    }
}

type AbstractTransition {
    reference commonRegion : Region[1..1]
    reference to : State[1..1]

    virtual tran { }
}

type EntryTransition : AbstractTransition {
    override tran {
        inline to.enter(commonRegion)
    }
}

type Transition : AbstractTransition {
    reference from : State[0..1]

    feature trigger : Trigger
    feature actions : Action[0..*]

    tran {
        inline trigger.isTriggered()
        inline from.isActive()

        inline from.exit(commonRegion)
        inline seq actions -> main
        inline to.enter(commonRegion)
    }
}

// Controller.oxsts

type Controller : Statechart {
    containment policeEvent :> inputEvents : Event

    containment policeEventA :> outputEvents : Event
    containment toggleEventA :> outputEvents : Event

    containment policeEventB :> outputEvents : Event
    containment toggleEventB :> outputEvents : Event

    containment trafficTimeout :> timeouts : Timeout

    containment Main :> regions : Region {
        containment et1 :> entryTransitions : EntryTransition {
            reference ::> commonRegion : Region = Main
            reference ::> to : State = Operating
        }

        containment Operating :> states : State {
            reference ::> parent : Region = Main

            containment OperatingRegion :> regions : Region {
                containment et2 :> entryTransitions : EntryTransition {
                    reference ::> commonRegion : Region = OperatingRegion
                    reference ::> to : State = Init
                }

                containment Init :> states : State {
                    reference ::> parent : Region = OperatingRegion
                    reference ::> parentState : State = Operating

                    containment ea1 :> entryActions : SetTimeoutAction {
                        reference ::> timeout : Timeout = trafficTimeout
                    }
                }

                containment initToTrafficOnA :> transitions : Transition {
                    reference ::> commonRegion : Region = Main
                    reference ::> from : State = Init
                    reference ::> to : State = TrafficOnA

                    containment t :> trigger : TimeoutTrigger {
                        reference ::> timeout : Timeout = trafficTimeout
                    }
                    containment a :> actions : RaiseEventAction {
                        reference ::> event : Event = toggleEventA // switch A to Green
                    }
                }

                containment TrafficOnA :> states : State {
                    reference ::> parent : Region = OperatingRegion
                    reference ::> parentState : State = Operating

                    containment a :> entryActions : SetTimeoutAction {
                        reference ::> timeout : Timeout = trafficTimeout
                        reference ::> amount : Integer = 2
                    }
                }

                containment trafficOnAToStoppingA :> transitions : Transition {
                    reference ::> commonRegion : Region = Main
                    reference ::> from : State = TrafficOnA
                    reference ::> to : State = StoppingA

                    containment t :> trigger : TimeoutTrigger {
                        reference ::> timeout : Timeout = trafficTimeout
                    }
                    containment a :> actions : RaiseEventAction {
                        reference ::> event : Event = toggleEventA // switch A to Yellow
                    }
                }

                containment StoppingA :> states : State {
                    reference ::> parent : Region = OperatingRegion
                    reference ::> parentState : State = Operating

                    containment a :> entryActions : SetTimeoutAction {
                        reference ::> timeout : Timeout = trafficTimeout
                    }
                }

                containment stoppingAToTrafficOnB :> transitions : Transition {
                    reference ::> commonRegion : Region = Main
                    reference ::> from : State = StoppingA
                    reference ::> to : State = TrafficOnB

                    containment t :> trigger : TimeoutTrigger {
                        reference ::> timeout : Timeout = trafficTimeout
                    }
                    containment a1 :> actions : RaiseEventAction {
                        reference ::> event : Event = toggleEventA // switch A to Red
                    }
                    containment a2 :> actions : RaiseEventAction {
                        reference ::> event : Event = toggleEventB // switch B to Green
                    }
                }

                containment TrafficOnB :> states : State {
                    reference ::> parent : Region = OperatingRegion
                    reference ::> parentState : State = Operating

                    containment a :> entryActions : SetTimeoutAction {
                        reference ::> timeout : Timeout = trafficTimeout
                        reference ::> amount : Integer = 2
                    }
                }

                containment trafficOnBToStoppingB :> transitions : Transition {
                    reference ::> commonRegion : Region = Main
                    reference ::> from : State = TrafficOnB
                    reference ::> to : State = StoppingB

                    containment t :> trigger : TimeoutTrigger {
                        reference ::> timeout : Timeout = trafficTimeout
                    }
                    containment a :> actions : RaiseEventAction {
                        reference ::> event : Event = toggleEventB // switch B to Yellow
                    }
                }

                containment StoppingB :> states : State {
                    reference ::> parent : Region = OperatingRegion
                    reference ::> parentState : State = Operating

                    containment a :> entryActions : SetTimeoutAction {
                        reference ::> timeout : Timeout = trafficTimeout
                    }
                }

                containment stoppingBToTrafficOnA :> transitions : Transition {
                    reference ::> commonRegion : Region = Main
                    reference ::> from : State = StoppingB
                    reference ::> to : State = TrafficOnA

                    containment t :> trigger : TimeoutTrigger {
                        reference ::> timeout : Timeout = trafficTimeout
                    }
                    containment a1 :> actions : RaiseEventAction {
                        reference ::> event : Event = toggleEventB // switch B to Red
                    }
                    containment a2 :> actions : RaiseEventAction {
                        reference ::> event : Event = toggleEventA // switch A to Green
                    }
                }
            }
        }

        containment operatingToInterrupted :> transitions : Transition {
            reference ::> commonRegion : Region = Main
            reference ::> from : State = Operating
            reference ::> to : State = Interrupted

            containment t :> trigger : EventTrigger {
                reference ::> event : Event = policeEvent
            }
        }

        containment interruptedToOperating :> transitions : Transition {
            reference ::> commonRegion : Region = Main
            reference ::> from : State = Interrupted
            reference ::> to : State = Operating

            containment t :> trigger : EventTrigger {
                reference ::> event : Event = policeEvent
            }
        }

        containment Interrupted :> states : State {
            reference ::> parent : Region = Main

            containment ea1 :> entryActions : RaiseEventAction {
                reference ::> event : Event = policeEventA
            }
            containment ea2 :> entryActions : RaiseEventAction {
                reference ::> event : Event = policeEventB
            }
            containment ea3 :> exitActions : RaiseEventAction {
                reference ::> event : Event = policeEventA
            }
            containment ea4 :> exitActions : RaiseEventAction {
                reference ::> event : Event = policeEventB
            }
        }
    }
}

// TrafficLightCtrl.oxsts

type TrafficLightCtrl : Statechart {
    containment policeEvent :> inputEvents : Event
    containment toggleEvent :> inputEvents : Event

    containment displayRedEvent :> outputEvents : Event
    containment displayYellowEvent :> outputEvents : Event
    containment displayGreenEvent :> outputEvents : Event
    containment displayNoneEvent :> outputEvents : Event

    containment blinkingTimeout :> timeouts : Timeout

    containment Main :> regions : Region { // this defines a new MainRegion type inheriting from Region
        containment et :> entryTransitions : EntryTransition {
            reference ::> commonRegion : Region = Main
            reference ::> to : State = Normal
        }

        containment Normal :> states : State {
            reference ::> parent : Region = Main

            containment NormalRegion :> regions : Region {
                containment et2 :> entryTransitions : EntryTransition {
                    reference ::> commonRegion : Region = NormalRegion
                    reference ::> to : State = Red
                }

                containment Red :> states : State {
                    reference ::> parent : Region = NormalRegion
                    reference ::> parentState : State = Normal

                    containment e :> entryActions : RaiseEventAction {
                        reference ::> event : Event = displayRedEvent
                    }
                }

                containment redToGreen :> transitions : Transition {
                    reference ::> commonRegion : Region = NormalRegion
                    reference ::> from : State = Red
                    reference ::> to : State = Green

                    containment t :> trigger : EventTrigger {
                        reference ::> event : Event = toggleEvent
                    }
                }

                containment Green :> states : State {
                    reference ::> parent : Region = NormalRegion
                    reference ::> parentState : State = Normal

                    containment e :> entryActions : RaiseEventAction {
                        reference ::> event : Event = displayGreenEvent
                    }
                }

                containment greenToYellow :> transitions : Transition {
                    reference ::> commonRegion : Region = NormalRegion
                    reference ::> from : State = Green
                    reference ::> to : State = Yellow

                    containment t :> trigger : EventTrigger {
                        reference ::> event : Event = toggleEvent
                    }
                }

                containment Yellow :> states : State {
                    reference ::> parent : Region = NormalRegion
                    reference ::> parentState : State = Normal

                    containment e :> entryActions : RaiseEventAction {
                        reference ::> event : Event = displayYellowEvent
                    }
                }

                containment yellowToRed :> transitions : Transition {
                    reference ::> commonRegion : Region = NormalRegion
                    reference ::> from : State = Yellow
                    reference ::> to : State = Red

                    containment t :> trigger : EventTrigger {
                        reference ::> event : Event = toggleEvent
                    }
                }
            }
        }

        containment normalToInterrupt :> transitions : Transition {
            reference ::> commonRegion : Region = Main
            reference ::> from : State = Normal
            reference ::> to : State = Interrupted

            containment t :> trigger : EventTrigger {
                reference ::> event : Event = policeEvent
            }
        }

        containment interruptToNormal :> transitions : Transition {
            reference ::> commonRegion : Region = Main
            reference ::> from : State = Interrupted
            reference ::> to : State = Normal

            containment t :> trigger : EventTrigger {
                reference ::> event : Event = policeEvent
            }
        }

        containment Interrupted :> states : State {
            reference ::> parent : Region = Main

            containment InterruptedRegion :> regions : Region {
                containment et :> entryTransitions : EntryTransition {
                    reference ::> commonRegion : Region = InterruptedRegion
                    reference ::> to : State = Black
                }

                containment Black :> states : State {
                    reference ::> parent : Region = InterruptedRegion
                    reference ::> parentState : State = Interrupted

                    containment ea1 :> entryActions : SetTimeoutAction {
                        reference ::> timeout : Timeout = blinkingTimeout
                    }
                    containment ea2 :> entryActions : RaiseEventAction {
                        reference ::> event : Event = displayNoneEvent
                    }
                }

                containment blackToYellow :> transitions : Transition {
                    reference ::> commonRegion : Region = InterruptedRegion
                    reference ::> from : State = Black
                    reference ::> to : State = Yellow

                    containment t :> trigger : TimeoutTrigger {
                        reference ::> timeout : Timeout = blinkingTimeout
                    }
                }

                containment yellowToBlack :> transitions : Transition {
                    reference ::> commonRegion : Region = InterruptedRegion
                    reference ::> from : State = Yellow
                    reference ::> to : State = Black

                    containment t :> trigger : TimeoutTrigger {
                        reference ::> timeout : Timeout = blinkingTimeout
                    }
                }

                containment Yellow :> states : State {
                    reference ::> parent : Region = InterruptedRegion
                    reference ::> parentState : State = Interrupted

                    containment ea1 :> entryActions : SetTimeoutAction {
                        reference ::> timeout : Timeout = blinkingTimeout
                    }
                    containment ea2 :> entryActions : RaiseEventAction {
                        reference ::> event : Event = displayYellowEvent
                    }
                }

            }
        }
    }
}

type Crossroad : SyncComponent {
    containment controller :> components : Controller
    containment trafficLightA :> components : TrafficLightCtrl
    containment trafficLightB :> components : TrafficLightCtrl

    containment policeAChannel :> channels : Channel {
        reference ::> inputEvent : Event = controller.policeEventA
        reference ::> outputEvent : Event = trafficLightA.policeEvent
    }
    containment toggleAChannel :> channels : Channel {
        reference ::> inputEvent : Event = controller.toggleEventA
        reference ::> outputEvent : Event = trafficLightA.toggleEvent
    }

    containment policeBChannel :> channels : Channel {
        reference ::> inputEvent : Event = controller.policeEventB
        reference ::> outputEvent : Event = trafficLightB.policeEvent
    }
    containment toggleBChannel :> channels : Channel {
        reference ::> inputEvent : Event = controller.toggleEventB
        reference ::> outputEvent : Event = trafficLightB.toggleEvent
    }
}

abstract target CrossroadsMission {
    containment crossroad : Crossroad

    init {
        inline crossroad.init()
    }

    tran {
        inline crossroad.controller.policeEvent.havoc
        inline crossroad.main()
    }
}

// Controller state tests

target ControllerOperating_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.controller.Main.activeState == crossroad.controller.Main.Operating)
    }
}

target ControllerOperatingInit_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.controller.Main.Operating.OperatingRegion.activeState == crossroad.controller.Main.Operating.OperatingRegion.Init)
    }
}

target ControllerOperatingTrafficOnA_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.controller.Main.Operating.OperatingRegion.activeState == crossroad.controller.Main.Operating.OperatingRegion.TrafficOnA)
    }
}

target ControllerOperatingStoppingA_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.controller.Main.Operating.OperatingRegion.activeState == crossroad.controller.Main.Operating.OperatingRegion.StoppingA)
    }
}

target ControllerOperatingTrafficOnB_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.controller.Main.Operating.OperatingRegion.activeState == crossroad.controller.Main.Operating.OperatingRegion.TrafficOnB)
    }
}

target ControllerOperatingStoppingB_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.controller.Main.Operating.OperatingRegion.activeState == crossroad.controller.Main.Operating.OperatingRegion.StoppingB)
    }
}

target ControllerInterrupted_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.controller.Main.activeState == crossroad.controller.Main.Interrupted)
    }
}

// TrafficLightA state tests

target TrafficLightANormal_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.trafficLightA.Main.activeState == crossroad.trafficLightA.Main.Normal)
    }
}

target TrafficLightANormalRed_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.trafficLightA.Main.Normal.NormalRegion.activeState == crossroad.trafficLightA.Main.Normal.NormalRegion.Red)
    }
}

target TrafficLightANormalGreen_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.trafficLightA.Main.Normal.NormalRegion.activeState == crossroad.trafficLightA.Main.Normal.NormalRegion.Green)
    }
}

target TrafficLightANormalYellow_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.trafficLightA.Main.Normal.NormalRegion.activeState == crossroad.trafficLightA.Main.Normal.NormalRegion.Yellow)
    }
}

target TrafficLightAInterrupted_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.trafficLightA.Main.activeState == crossroad.trafficLightA.Main.Interrupted)
    }
}

target TrafficLightAInterruptedBlack_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.trafficLightA.Main.Interrupted.InterruptedRegion.activeState == crossroad.trafficLightA.Main.Interrupted.InterruptedRegion.Black)
    }
}

target TrafficLightAInterruptedYellow_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.trafficLightA.Main.Interrupted.InterruptedRegion.activeState == crossroad.trafficLightA.Main.Interrupted.InterruptedRegion.Yellow)
    }
}

// TrafficLightB state tests

target TrafficLightBNormal_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.trafficLightB.Main.activeState == crossroad.trafficLightB.Main.Normal)
    }
}

target TrafficLightBNormalRed_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.trafficLightB.Main.Normal.NormalRegion.activeState == crossroad.trafficLightB.Main.Normal.NormalRegion.Red)
    }
}

target TrafficLightBNormalGreen_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.trafficLightB.Main.Normal.NormalRegion.activeState == crossroad.trafficLightB.Main.Normal.NormalRegion.Green)
    }
}

target TrafficLightBNormalYellow_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.trafficLightB.Main.Normal.NormalRegion.activeState == crossroad.trafficLightB.Main.Normal.NormalRegion.Yellow)
    }
}

target TrafficLightBInterrupted_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.trafficLightB.Main.activeState == crossroad.trafficLightB.Main.Interrupted)
    }
}

target TrafficLightBInterruptedBlack_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.trafficLightB.Main.Interrupted.InterruptedRegion.activeState == crossroad.trafficLightB.Main.Interrupted.InterruptedRegion.Black)
    }
}

target TrafficLightBInterruptedYellow_Unsafe : CrossroadsMission {
    prop {
        ! (crossroad.trafficLightB.Main.Interrupted.InterruptedRegion.activeState == crossroad.trafficLightB.Main.Interrupted.InterruptedRegion.Yellow)
    }
}

// Incorrect state tests

target ControllerOperatingInterruptedExclusive_Safe : CrossroadsMission {
    prop {
        ! (
            crossroad.controller.Main.activeState == crossroad.controller.Main.Interrupted &&
            crossroad.controller.Main.Operating.OperatingRegion.activeState != Nothing
        )
    }
}

target ControllerOperatingIncorrectStateHierarchy_Safe : CrossroadsMission {
    prop {
        ! (
            crossroad.controller.Main.activeState == crossroad.controller.Main.Operating &&
            crossroad.controller.Main.Operating.OperatingRegion.activeState != crossroad.controller.Main.Operating.OperatingRegion.Init &&
            crossroad.controller.Main.Operating.OperatingRegion.activeState != crossroad.controller.Main.Operating.OperatingRegion.TrafficOnA &&
            crossroad.controller.Main.Operating.OperatingRegion.activeState != crossroad.controller.Main.Operating.OperatingRegion.StoppingA &&
            crossroad.controller.Main.Operating.OperatingRegion.activeState != crossroad.controller.Main.Operating.OperatingRegion.TrafficOnB &&
            crossroad.controller.Main.Operating.OperatingRegion.activeState != crossroad.controller.Main.Operating.OperatingRegion.StoppingB
        )
    }
}

target TrafficLightANormalInterruptedExclusive_Safe : CrossroadsMission {
    prop {
        ! (
            (
                crossroad.trafficLightA.Main.activeState == crossroad.trafficLightA.Main.Normal &&
                crossroad.trafficLightA.Main.Interrupted.InterruptedRegion.activeState != Nothing
            ) || (
                crossroad.trafficLightA.Main.activeState == crossroad.trafficLightA.Main.Interrupted &&
                crossroad.trafficLightA.Main.Normal.NormalRegion.activeState != Nothing
            )
        )
    }
}

target TrafficLightANormalIncorrectStateHierarchy_Safe : CrossroadsMission {
    prop {
        ! (
            crossroad.trafficLightA.Main.activeState == crossroad.trafficLightA.Main.Normal &&
            crossroad.trafficLightA.Main.Normal.NormalRegion.activeState != crossroad.trafficLightA.Main.Normal.NormalRegion.Red &&
            crossroad.trafficLightA.Main.Normal.NormalRegion.activeState != crossroad.trafficLightA.Main.Normal.NormalRegion.Green &&
            crossroad.trafficLightA.Main.Normal.NormalRegion.activeState != crossroad.trafficLightA.Main.Normal.NormalRegion.Yellow
        )
    }
}

target TrafficLightAInterruptedIncorrectStateHierarchy_Safe : CrossroadsMission {
    prop {
        ! (
            crossroad.trafficLightA.Main.activeState == crossroad.trafficLightA.Main.Interrupted &&
            crossroad.trafficLightA.Main.Interrupted.InterruptedRegion.activeState != crossroad.trafficLightA.Main.Interrupted.InterruptedRegion.Black &&
            crossroad.trafficLightA.Main.Interrupted.InterruptedRegion.activeState != crossroad.trafficLightA.Main.Interrupted.InterruptedRegion.Yellow
        )
    }
}

target TrafficLightBNormalInterruptedExclusive_Safe : CrossroadsMission {
    prop {
        ! (
            (
                crossroad.trafficLightB.Main.activeState == crossroad.trafficLightB.Main.Normal &&
                crossroad.trafficLightB.Main.Interrupted.InterruptedRegion.activeState != Nothing
            ) || (
                crossroad.trafficLightB.Main.activeState == crossroad.trafficLightB.Main.Interrupted &&
                crossroad.trafficLightB.Main.Normal.NormalRegion.activeState != Nothing
            )
        )
    }
}

target TrafficLightBNormalIncorrectStateHierarchy_Safe : CrossroadsMission {
    prop {
        ! (
            crossroad.trafficLightB.Main.activeState == crossroad.trafficLightB.Main.Normal &&
            crossroad.trafficLightB.Main.Normal.NormalRegion.activeState != crossroad.trafficLightB.Main.Normal.NormalRegion.Red &&
            crossroad.trafficLightB.Main.Normal.NormalRegion.activeState != crossroad.trafficLightB.Main.Normal.NormalRegion.Green &&
            crossroad.trafficLightB.Main.Normal.NormalRegion.activeState != crossroad.trafficLightB.Main.Normal.NormalRegion.Yellow
        )
    }
}

target TrafficLightBInterruptedIncorrectStateHierarchy_Safe : CrossroadsMission {
    prop {
        ! (
            crossroad.trafficLightB.Main.activeState == crossroad.trafficLightB.Main.Interrupted &&
            crossroad.trafficLightB.Main.Interrupted.InterruptedRegion.activeState != crossroad.trafficLightB.Main.Interrupted.InterruptedRegion.Black &&
            crossroad.trafficLightB.Main.Interrupted.InterruptedRegion.activeState != crossroad.trafficLightB.Main.Interrupted.InterruptedRegion.Yellow
        )
    }
}

// Behaviour tests

target BothMustBeInterruptedAtTheSameTime_Unsafe : CrossroadsMission {
    prop {
        ! (
            (
                crossroad.trafficLightA.Main.activeState == crossroad.trafficLightA.Main.Interrupted &&
                crossroad.trafficLightB.Main.activeState == crossroad.trafficLightB.Main.Interrupted
            )
        )
    }
}

target BothMustBeInterruptedAtTheSameTime_Safe : CrossroadsMission {
    prop {
        ! (
            (
                crossroad.trafficLightA.Main.activeState == crossroad.trafficLightA.Main.Interrupted &&
                crossroad.trafficLightB.Main.activeState != crossroad.trafficLightB.Main.Interrupted
            ) || (
                crossroad.trafficLightA.Main.activeState != crossroad.trafficLightA.Main.Interrupted &&
                crossroad.trafficLightB.Main.activeState == crossroad.trafficLightB.Main.Interrupted
            )
        )
    }
}

target ARedBRed_Unsafe : CrossroadsMission {
    prop {
        ! (
            crossroad.trafficLightA.Main.Normal.NormalRegion.activeState == crossroad.trafficLightA.Main.Normal.NormalRegion.Red &&
            crossroad.trafficLightB.Main.Normal.NormalRegion.activeState == crossroad.trafficLightB.Main.Normal.NormalRegion.Red
        )
    }
}

target ARedBGreen_Unsafe : CrossroadsMission {
    prop {
        ! (
            crossroad.trafficLightA.Main.Normal.NormalRegion.activeState == crossroad.trafficLightA.Main.Normal.NormalRegion.Red &&
            crossroad.trafficLightB.Main.Normal.NormalRegion.activeState == crossroad.trafficLightB.Main.Normal.NormalRegion.Green
        )
    }
}

target ARedBYellow_Unsafe : CrossroadsMission {
    prop {
        ! (
            crossroad.trafficLightA.Main.Normal.NormalRegion.activeState == crossroad.trafficLightA.Main.Normal.NormalRegion.Red &&
            crossroad.trafficLightB.Main.Normal.NormalRegion.activeState == crossroad.trafficLightB.Main.Normal.NormalRegion.Yellow
        )
    }
}

target AGreenBRed_Unsafe : CrossroadsMission {
    prop {
        ! (
            crossroad.trafficLightA.Main.Normal.NormalRegion.activeState == crossroad.trafficLightA.Main.Normal.NormalRegion.Green &&
            crossroad.trafficLightB.Main.Normal.NormalRegion.activeState == crossroad.trafficLightB.Main.Normal.NormalRegion.Red
        )
    }
}

target AGreenBGreen_Safe : CrossroadsMission {
    prop {
        ! (
            crossroad.trafficLightA.Main.Normal.NormalRegion.activeState == crossroad.trafficLightA.Main.Normal.NormalRegion.Green &&
            crossroad.trafficLightB.Main.Normal.NormalRegion.activeState == crossroad.trafficLightB.Main.Normal.NormalRegion.Green
        )
    }
}

target AGreenBYellow_Safe : CrossroadsMission {
    prop {
        ! (
            crossroad.trafficLightA.Main.Normal.NormalRegion.activeState == crossroad.trafficLightA.Main.Normal.NormalRegion.Green &&
            crossroad.trafficLightB.Main.Normal.NormalRegion.activeState == crossroad.trafficLightB.Main.Normal.NormalRegion.Yellow
        )
    }
}

target AYellowBRed_Unsafe : CrossroadsMission {
    prop {
        ! (
            crossroad.trafficLightA.Main.Normal.NormalRegion.activeState == crossroad.trafficLightA.Main.Normal.NormalRegion.Yellow &&
            crossroad.trafficLightB.Main.Normal.NormalRegion.activeState == crossroad.trafficLightB.Main.Normal.NormalRegion.Red
        )
    }
}

target AYellowBGreen_Safe : CrossroadsMission {
    prop {
        ! (
            crossroad.trafficLightA.Main.Normal.NormalRegion.activeState == crossroad.trafficLightA.Main.Normal.NormalRegion.Yellow &&
            crossroad.trafficLightB.Main.Normal.NormalRegion.activeState == crossroad.trafficLightB.Main.Normal.NormalRegion.Green
        )
    }
}

target AYellowBYellow_Safe : CrossroadsMission {
    prop {
        ! (
            crossroad.trafficLightA.Main.Normal.NormalRegion.activeState == crossroad.trafficLightA.Main.Normal.NormalRegion.Yellow &&
            crossroad.trafficLightB.Main.Normal.NormalRegion.activeState == crossroad.trafficLightB.Main.Normal.NormalRegion.Yellow
        )
    }
}
