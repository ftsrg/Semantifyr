package Test

// Event.oxsts

type Event {
    var isActive: Boolean := false

    tran set {
        isActive := true
    }

    tran reset {
        isActive := false
    }

    havoc {
        havoc (isActive)
    }

    tran isSet {
        assume (isActive)
    }
}

type Timeout {
    var deltaTime : Integer := 0

    tran {
        if (deltaTime > 0) {
            deltaTime := deltaTime - 500
        }
    }

    tran isUp {
        assume (deltaTime <= 0)
    }
}

// Trigger.oxsts

type Trigger {
    virtual tran isTriggered {
        assume (true)
    }
}

type EventTrigger : Trigger {
    reference event : Event[1..1]

    override tran isTriggered {
        inline event.isSet()
    }
}

type TimeoutTrigger : Trigger {
    reference timeout : Timeout[1..1]

    override tran isTriggered {
        inline timeout.isUp()
    }
}

// Action.oxsts

type Action {
    virtual tran { }
}

type RaiseEventAction : Action {
    reference event : Event[1..1]

    override tran {
        inline event.set()
    }
}

type SetTimeoutAction : Action {
    reference timeout : Timeout[1..1]
}

type Guard {
    virtual tran { }
}

// Component.oxsts

type Component {
    virtual init { }
    virtual tran { }
}

type Channel {
    reference inputEvent : Event
    reference outputEvent : Event

    tran {
        if (inputEvent.isActive) {
            inline outputEvent.set()
        }
    }
}

type CompositeComponent : Component {
    feature components : Component
    feature channels : Channel
}

type SyncComponent : CompositeComponent {
    override init {
        inline seq components -> init
    }

    override tran {
        inline seq components -> main
        inline seq channels -> main
    }
}

// Statechart.oxsts

type Statechart : Component {
    feature events : Event[0..*]
    feature inputEvents :> events : Event[0..*]
    feature outputEvents :> events : Event[0..*]

    feature timeouts : Timeout[0..*]

    feature regions : Region[0..*]

    override init {
        inline seq regions -> activateRecursive
    }

    override tran {
        inline seq outputEvents -> reset
        inline choice regions -> fireTransitions else { }
        inline seq inputEvents -> reset
    }
}

type Region {
    feature abstractStates : AbstractState[0..*]
    feature states :> abstractStates : State[0..*]

    var activeState : states[0..1] := Nothing

    feature abstractTransitions : AbstractTransition[0..*]

    feature transitions :> abstractTransitions : Transition[0..*]
    feature entryTransitions :> abstractTransitions : EntryTransition[0..*]

    tran activateRecursive {
        inline seq entryTransitions -> main
    }

    tran deactivateRecursive {
        inline seq states -> deactivateRecursive
    }

    tran fireTransitions {
        inline choice transitions -> main else {
            inline choice states -> fireTransitions else { }
        }
    }
}

type AbstractState {
    reference parent : Region[0..1]
    reference parentState : State[0..1]
}

type State : AbstractState {
    feature regions : Region[0..1]

    feature entryActions : Action[0..*]
    feature exitActions : Action[0..*]

    tran isActive {
        assume (parent.activeState = Self)
    }

    tran deactivateRecursive {
        inline seq regions -> deactivateRecursive

        if (parent.activeState = Self) {
            parent.activeState := Nothing
            inline seq exitActions -> main
        }
    }

    tran exitRecursive(commonRegion : Region) {
        inline seq exitActions -> main

        parent.activeState := Nothing

        inline if (commonRegion != parent) {
            inline parentState.exitRecursive(commonRegion)
        }
    }

    tran exit(commonRegion : Region) {
        inline exitRecursive(commonRegion)

        inline seq regions -> deactivateRecursive
    }

    tran enterRecursive(commonRegion : Region) {
        inline if (commonRegion != parent) {
            inline parentState.enterRecursive(commonRegion)
        }

        parent.activeState := Self

        inline seq entryActions -> main
    }

    tran enter(commonRegion : Region) {
        inline enterRecursive(commonRegion)

        inline seq regions -> activateRecursive
    }

    tran fireTransitions {
        inline seq regions -> fireTransitions
    }
}

type AbstractTransition {
    reference commonRegion : Region[1..1]
    reference to : State[1..1]

    virtual tran {
        assume (true)
    }
}

type EntryTransition : AbstractTransition {
    override tran {
        inline to.enter(commonRegion)
    }
}

type Transition : AbstractTransition {
    reference from : State[0..1]

    feature trigger : Trigger
    feature actions : Action[0..*]
    feature guards : Guard[0..*]

    tran {
        inline seq guards -> main
        inline trigger.isTriggered()
        inline from.isActive()

        inline from.exit(commonRegion)
        inline seq actions -> main
        inline to.enter(commonRegion)
    }
}

// Station.oxsts

type SetTimeoutActionTenS : SetTimeoutAction {
    override tran {
        timeout.deltaTime := 10000
    }
}

type SetTimeoutActionFifteenS : SetTimeoutAction {
    override tran {
        timeout.deltaTime := 15000
    }
}

type Station : Statechart {
    containment dataEvent :> inputEvents : Event
    containment pingEvent :> outputEvents : Event

    containment startEvent :> inputEvents : Event
    containment shutdownEvent :> inputEvents : Event

    containment pingTimeout :> timeouts : Timeout
    containment startTimeout :> timeouts : Timeout

    containment Main :> regions : Region {
        containment et1 :> entryTransitions : EntryTransition {
            reference commonRegion <- Main
            reference to <- Idle
        }

        containment Idle :> states : State {
            reference parent <- Main

            containment ea1 :> entryActions : SetTimeoutActionFifteenS {
                reference timeout <- startTimeout
            }
        }

        containment startOperation :> transitions : Transition {
            reference commonRegion <- Main
            reference from <- Idle
            reference to <- Operation

            containment t :> trigger : EventTrigger {
                reference event <- startEvent
            }
        }

        containment autoStartOperation :> transitions : Transition {
            reference commonRegion <- Main
            reference from <- Idle
            reference to <- Operation

            containment t :> trigger : TimeoutTrigger {
                reference timeout <- startTimeout
            }
        }

        containment Operation :> states : State {
            reference parent <- Main

            containment ea1 :> entryActions : SetTimeoutActionTenS {
                reference timeout <- pingTimeout
            }
            containment ea2 :> entryActions : RaiseEventAction {
                reference event <- pingEvent
            }

            containment ReceiveData :> regions : Region {
                containment et2 :> entryTransitions : EntryTransition {
                    reference commonRegion <- ReceiveData
                    reference to <- Waiting
                }

                containment Waiting :> states : State {
                    reference parent <- ReceiveData
                    reference parentState <- Operation
                }

                containment receivedDataOperation :> transitions : Transition {
                    reference commonRegion <- ReceiveData
                    reference from <- Waiting
                    reference to <- Waiting

                    containment t :> trigger : EventTrigger {
                        reference event <- dataEvent
                    }
                }
            }
        }

        containment resendPing :> transitions : Transition {
            reference commonRegion <- Main
            reference from <- Operation
            reference to <- Operation

            containment t :> trigger : TimeoutTrigger {
                reference timeout <- pingTimeout
            }
        }
    }
}

// TrafficLightCtrl.oxsts

type SetTimeoutActionOneS : SetTimeoutAction {
    override tran {
        timeout.deltaTime := 1000
    }
}

type SetTimeoutActionFifteenMS : SetTimeoutAction {
    override tran {
        timeout.deltaTime := 1500
    }
}

type SetRechargingAction : Action {
    reference spacecraft : Spacecraft

    override main {
        spacecraft.recharging := true
    }
}

type ResetRechargingAction : Action {
    reference spacecraft : Spacecraft

    override main {
        spacecraft.recharging := false
    }
}

type DecreaseBatteryChargeAction : Action {
    reference spacecraft : Spacecraft

    override main {
        spacecraft.batteryCharge := spacecraft.batteryCharge - 1
    }
}

type DecreaseBatteryChargeAction : Action {
    reference spacecraft : Spacecraft

    override main {
        spacecraft.batteryCharge := spacecraft.batteryCharge - 1
    }
}

type IncreaseBatteryChargeAction : Action {
    reference spacecraft : Spacecraft

    override main {
        spacecraft.batteryCharge := spacecraft.batteryCharge + 1
    }
}

type DecreaseDataAction : Action {
    reference spacecraft : Spacecraft

    override main {
        spacecraft.data := spacecraft.data - 1
    }
}

type CanConsumeGuard : Guard {
    reference spacecraft : Spacecraft

    override main {
        assert (spacecraft.batteryCharge >= 40)
    }
}

type CannotConsumeGuard : Guard {
    reference spacecraft : Spacecraft

    override main {
        assert (spacecraft.batteryCharge < 40)
    }
}

type IsNotRechargingGuard : Guard {
    reference spacecraft : Spacecraft

    override main {
        assume (spacecraft.recharging = false)
    }
}

type CanTransmitGuard : Guard {
    reference spacecraft : Spacecraft

    override main {
        assume (spacecraft.data > 1 && spacecraft.batteryCharge >= 40)
    }
}

type CannotTransmitGuard : Guard {
    reference spacecraft : Spacecraft

    override main {
        assume (spacecraft.data <= 1 || spacecraft.batteryCharge < 40)
    }
}

type ShouldRechargeGuard : Guard {
    reference spacecraft : Spacecraft

    override main {
        assume (spacecraft.batteryCharge < 80)
    }
}

type CanRechargeGuard : Guard {
    reference spacecraft : Spacecraft

    override main {
        assume (spacecraft.batteryCharge < 100)
    }
}

type CannotRechargeGuard : Guard {
    reference spacecraft : Spacecraft

    override main {
        assume (spacecraft.batteryCharge >= 100)
    }
}

type Spacecraft : Statechart {
    containment pingEvent :> inputEvents : Event
    containment dataEvent :> outputEvents : Event

    containment rechargeTimeout :> timeouts : Timeout
    containment consumeTimeout :> timeouts : Timeout
    containment transmitTimeout :> timeouts : Timeout

    var batteryCharge : Integer := 100
    var data : Integer := 100
    var recharging : Boolean := false

    containment Communication :> regions : Region {
        containment et1 :> entryTransitions : EntryTransition {
            reference commonRegion <- Communication
            reference to <- WaitingPing
        }

        containment WaitingPing :> states : State {
            reference parent <- Communication
        }

        containment resendPing :> transitions : Transition {
            reference commonRegion <- Communication
            reference from <- WaitingPing
            reference to <- Transmitting

            containment t :> trigger : EventTrigger {
                reference event <- pingEvent
            }
            containment g :> guards : IsNotRechargingGuard {
                reference spacecraft <- Self
            }
        }

        containment Transmitting :> states : State {
            reference parent <- Communication

            containment SendData :> regions : Region {
                containment et2 :> entryTransitions : EntryTransition {
                    reference commonRegion <- SendData
                    reference to <- Sending
                }

                containment Sending :> states : State {
                    reference parent <- SendData
                    reference parentState <- Transmitting

                    containment ea1 :> entryActions : SetTimeoutActionFifteenMS {
                        reference timeout <- transmitTimeout
                    }
                }
            }

            containment ConsumePower :> regions : Region {
                containment et2 :> entryTransitions : EntryTransition {
                    reference commonRegion <- ConsumePower
                    reference to <- Consuming
                }

                containment Consuming :> states : State {
                    reference parent <- ConsumePower
                    reference parentState <- Transmitting

                    containment ea1 :> entryActions : SetTimeoutActionOneS {
                        reference timeout <- consumeTimeout
                    }
                }
            }
        }
    }

    containment Battery :> regions : Region {
        containment et1 :> entryTransitions : EntryTransition {
            reference commonRegion <- Battery
            reference to <- NotRecharging
        }

        containment NotRecharging :> states : State {
            reference parent <- Battery


        }

        containment Recharging :> states : State {
            reference parent <- Battery

            containment ea1 :> entryActions : SetTimeoutActionTenS {
                reference timeout <- rechargeTimeout
            }
        }
    }

}

type SpaceMission : SyncComponent {
    containment spacecraft :> components : Spacecraft
    containment station :> components : Station

    containment pingChannel :> channels : Channel {
        reference inputEvent <- station.pingEvent
        reference outputEvent <- spacecraft.pingEvent
    }
    containment dataChannel :> channels : Channel {
        reference inputEvent <- spacecraft.dataEvent
        reference outputEvent <- station.dataEvent
    }
}

target Mission {
    containment spaceMission : SpaceMission

    init {
        inline spaceMission.init()
    }

    tran {
        inline spaceMission.station.startEvent.havoc
        inline spaceMission.station.shutdownEvent.havoc
        inline spaceMission.main()
    }

    prop {
        true
    }
}
