package Test

// Event.oxsts

type Event {
    var isActive: Boolean := false

    tran set {
        isActive := true
    }

    tran reset {
        isActive := false
    }

    havoc {
        havoc (isActive)
    }

    tran isSet {
        assume (isActive)
    }
}

// Trigger.oxsts

type Trigger {
    virtual tran isTriggered {
        assume (true)
    }
}

type EventTrigger {
    reference event : Event[1..1]

    override tran isTriggered {
        inline event.isSet()
    }
}

// Action.oxsts

type Action {
    virtual tran {

    }
}

type RaiseEventAction : Action {
    reference event : Event[1..1]

    override tran {
        inline event.set()
    }
}

// Component.oxsts

type Component {
    virtual init {

    }

    virtual tran {

    }
}

type Channel {
    reference inputEvent : Event
    reference outputEvent : Event

    tran {
        choice {
            inline inputEvent.isSet()
            inline outputEvent.set()
        } else {

        }
    }
}

type CompositeComponent : Component {
    feature components : Component
    feature channels : Channel
}

type SyncComponent : CompositeComponent {
    override init {
        inline seq components -> init
    }

    override tran {
        inline seq components -> main
        inline seq channels -> main
    }
}

type AtomicComponent : Component {
    feature events : Event[0..*]
    feature inputEvents :> events : Event[0..*]
    feature outputEvents :> events : Event[0..*]
}

// Statechart.oxsts

type Statechart : AtomicComponent {
    feature region : Region[0..*]
    feature abstractTransitions : AbstractTransition[0..*]

    feature transitions :> abstractTransitions : Transition[0..*]
    feature entryTransitions :> abstractTransitions : EntryTransition[0..*]

    override init {
        inline seq entryTransitions -> main
    }

    override tran {
        inline seq outputEvents -> reset
        inline choice transitions -> main else { }
        inline seq inputEvents -> reset
    }
}

type Region {
    feature abstractStates : AbstractState[0..*]
    feature states :> abstractStates : State[0..*]

    var activeState : states[0..1] := Nothing
}

type AbstractState {
    reference parent : Region[0..1]
    reference parentState : State[0..1]

    tran exit(commonRegion : Region) {
        parent.activeState := Nothing

        inline if (commonRegion != parent) {
            inline parentState.exit(commonRegion)
        }
    }
    tran enter(commonRegion : Region) {
        inline if (commonRegion != parent) {
            inline parentState.enter(commonRegion)
        }

        parent.activeState := Self
    }
}

type State : AbstractState {
    feature region : Region[0..*]
}

type AbstractTransition {
    reference commonRegion : Region[1..1]
    reference from : AbstractState[0..1]
    reference to : AbstractState[1..1]

    virtual tran {
        assume (true)
    }
}

type EntryTransition : AbstractTransition {
    override tran {
        inline to.enter(commonRegion)
    }
}

type Transition : AbstractTransition {
    feature trigger : Trigger
    feature action : Action

    tran {
        inline trigger.isTriggered()

        inline from.exit(commonRegion)
        inline action.main()
        inline to.enter(commonRegion)
    }
}

// Mission.oxsts

type SimpleStatechart : Statechart {
    instance fireEvent :> inputEvents : Event
    instance stopEvent :> inputEvents : Event
    instance startEvent :> outputEvents : Event

    instance Main :> region : Region {
        instance A :> states : State {
            reference parent <- Main

            instance ARegion :> region : Region {
                instance Idle :> states : State {
                    reference parent <- ARegion
                    reference parentState <- A
                }
            }
        }

        instance B :> states : State {
            reference parent <- Main

            instance BRegion :> region : Region {
                instance Operation :> states : State {
                    reference parent <- BRegion
                    reference parentState <- B
                }
            }
        }
    }

    instance et1 :> entryTransitions : EntryTransition {
        reference commonRegion <- Main
        reference to <- Main.A.ARegion.Idle
    }

    instance t1 :> transitions : Transition {
        reference commonRegion <- Main
        reference from <- Main.A.ARegion.Idle
        reference to <- Main.B.BRegion.Operation

        instance t1Trigger :> trigger : EventTrigger {
            reference event <- fireEvent
        }
        instance t1Action :> action : RaiseEventAction {
            reference event <- startEvent
        }
    }
    instance t2 :> transitions : Transition {
        reference commonRegion <- Main
        reference from <- Main.B.BRegion.Operation
        reference to <- Main.A.ARegion.Idle

        instance t2Trigger :> trigger : EventTrigger {
            reference event <- stopEvent
        }
    }
}

type WorkerStatechart : Statechart {
    instance startEvent :> inputEvents : Event

    instance Main :> region : Region {
        instance A :> states : State {
            reference parent <- Main

            instance ARegion :> region : Region {
                instance Idle :> states : State {
                    reference parent <- ARegion
                    reference parentState <- A
                }
            }
        }

        instance B :> states : State {
            reference parent <- Main

            instance BRegion :> region : Region {
                instance Operation :> states : State {
                    reference parent <- BRegion
                    reference parentState <- B
                }
            }
        }
    }

    instance et1 :> entryTransitions : EntryTransition {
        reference commonRegion <- Main
        reference to <- Main.A.ARegion.Idle
    }

    instance t1 :> transitions : Transition {
        reference commonRegion <- Main
        reference from <- Main.A.ARegion.Idle
        reference to <- Main.B.BRegion.Operation

        instance t1Trigger :> trigger : EventTrigger {
            reference event <- startEvent
        }
    }
}

type Spacecraft : SyncComponent {
    instance simple :> components : SimpleStatechart
    instance worker :> components : WorkerStatechart
    instance startChannel :> channels : Channel {
        reference inputEvent <- simple.startEvent
        reference outputEvent <- worker.startEvent
    }
}

target Mission {
    instance component : Spacecraft

    init {
        inline component.init()
    }

    tran {
        inline component.main()
        havoc (component.simple.fireEvent.isActive)
        havoc (component.simple.stopEvent.isActive)
    }

    prop {
        component.worker.Main.B.BRegion.activeState != component.worker.Main.B.BRegion.Operation
    }
}
