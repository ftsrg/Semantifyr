type __Mission__system__leader__Main__states__type : {
    __Mission__system__leader__Main__Idle__literal,
    __Mission__system__leader__Main__Operational__literal,
    __Nothing__literal
}
type __Mission__system__worker__Main__states__type : {
    __Mission__system__worker__Main__Idle__literal,
    __Mission__system__worker__Main__Operational__literal,
    __Nothing__literal
}

ctrl var __Mission__system__leader__fireEvent__isActive : boolean = false
ctrl var __Mission__system__leader__stopEvent__isActive : boolean = false
ctrl var __Mission__system__leader__startEvent__isActive : boolean = false
ctrl var __Mission__system__leader__Main__activeState : __Mission__system__leader__Main__states__type = __Nothing__literal
ctrl var __Mission__system__worker__startEvent__isActive : boolean = false
ctrl var __Mission__system__worker__Main__activeState : __Mission__system__worker__Main__states__type = __Nothing__literal

trans {
    havoc __Mission__system__leader__fireEvent__isActive;
    havoc __Mission__system__leader__stopEvent__isActive;
    __Mission__system__leader__startEvent__isActive := false;
    choice {
        assume (__Mission__system__leader__fireEvent__isActive);
        assume ((__Mission__system__leader__Main__activeState == __Mission__system__leader__Main__Idle__literal));
        __Mission__system__leader__Main__activeState := __Nothing__literal;
        __Mission__system__leader__startEvent__isActive := true;
        __Mission__system__leader__Main__activeState := __Mission__system__leader__Main__Operational__literal;
    } or {
        assume (__Mission__system__leader__stopEvent__isActive);
        assume ((__Mission__system__leader__Main__activeState == __Mission__system__leader__Main__Operational__literal));
        __Mission__system__leader__Main__activeState := __Nothing__literal;
        __Mission__system__leader__Main__activeState := __Mission__system__leader__Main__Idle__literal;
    } or {
        assume (! (((__Mission__system__leader__fireEvent__isActive && (__Mission__system__leader__Main__activeState == __Mission__system__leader__Main__Idle__literal)) || (__Mission__system__leader__stopEvent__isActive && (__Mission__system__leader__Main__activeState == __Mission__system__leader__Main__Operational__literal)))));
    }
    __Mission__system__leader__fireEvent__isActive := false;
    __Mission__system__leader__stopEvent__isActive := false;
    choice {
        assume (__Mission__system__worker__startEvent__isActive);
        assume ((__Mission__system__worker__Main__activeState == __Mission__system__worker__Main__Idle__literal));
        __Mission__system__worker__Main__activeState := __Nothing__literal;
        __Mission__system__worker__Main__activeState := __Mission__system__worker__Main__Operational__literal;
    } or {
        assume (! ((__Mission__system__worker__startEvent__isActive && (__Mission__system__worker__Main__activeState == __Mission__system__worker__Main__Idle__literal))));
    }
    __Mission__system__worker__startEvent__isActive := false;
    if (__Mission__system__leader__startEvent__isActive) {
        __Mission__system__worker__startEvent__isActive := true;
    }
}

init {
    __Mission__system__leader__Main__activeState := __Mission__system__leader__Main__Idle__literal;
    __Mission__system__worker__Main__activeState := __Mission__system__worker__Main__Idle__literal;
}

env {}

prop {
    (__Mission__system__worker__Main__activeState != __Mission__system__worker__Main__Operational__literal)
}
