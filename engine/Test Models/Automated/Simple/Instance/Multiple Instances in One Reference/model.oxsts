package Test

type Simple {
    var x : Integer := 0

    tran {
        x := x + 1
    }
}

type Composite {
    feature simples : Simple[0..*]
    reference mainSimple : Simple[0..*]

    tran {
        inline seq mainSimple -> main
    }
}

target Mission {
    containment composite : Composite {
        containment a :> simples : Simple
        containment b :> simples : Simple
        containment c :> simples : Simple
        containment d :> simples : Simple

        reference mainSimpleA :> mainSimple = a
        reference mainSimpleB :> mainSimple = b
        reference mainSimpleD :> mainSimple = d
    }

    init {
        assume (false)
    }

    tran {
        inline composite.main()
    }

    prop {
        false
    }
}
