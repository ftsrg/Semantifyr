/*
 * SPDX-FileCopyrightText: 2024 The Semantifyr Authors
 *
 * SPDX-License-Identifier: EPL-2.0
 */

package Test

type Atom {
    var x : Integer

    reference parent : Composite

    tran {
        inline parent.functor(Self)
    }
}

type Holder {
    feature atom : Atom

    tran {
        inline atom.main()
    }
}

type Composite {
    feature holders : Holder[0..*]

    tran {
        inline seq holders -> main
    }

    tran functor(atom: Atom) {
        atom.x := 10
    }
}

target Mission {
    containment composite : Composite {
        containment a :> holders : Holder {
            containment aAtom :> atom : Atom {
                reference ::> parent : Composite = composite
            }
        }
        containment b :> holders : Holder {
            containment bAtom :> atom : Atom {
                reference ::> parent : Composite = composite
            }
        }
    }

    init {
        assume (false)
    }

    tran {
        inline composite.main()
    }

    prop {
        false
    }
}
