package Statecharts

import Components
import Triggers
import Actions

type Statechart : Component {
    feature events : Event[0..*]
    feature inputEvents :> events : Event[0..*]
    feature outputEvents :> events : Event[0..*]

    feature timeouts : Timeout[0..*]

    feature regions : Region[0..*]

    override init {
        inline seq regions -> activateRecursive
    }

    override tran {
        inline seq outputEvents -> reset
        choice {
            inline seq regions -> fireTransitions
        } else { }
        inline seq inputEvents -> reset
        inline seq timeouts -> main
    }
}

type Region {
    feature states : State[0..*]

    var activeState : states[0..1] = Nothing

    feature abstractTransitions : AbstractTransition[0..*]

    feature transitions :> abstractTransitions : Transition[0..*]
    feature entryTransitions :> abstractTransitions : EntryTransition[0..*]

    tran activateRecursive {
        inline seq entryTransitions -> main
    }

    tran deactivateRecursive {
        inline seq states -> deactivateRecursive
    }

    tran fireTransitions {
        inline choice transitions -> main else {
            inline choice states -> fireTransitions
        }
    }
}

type State {
    reference parent : Region[0..1]
    reference parentState : State[0..1]
    feature regions : Region[0..1]

    feature entryActions : Action[0..*]
    feature exitActions : Action[0..*]

    tran isActive {
        assume (parent.activeState == Self)
    }

    tran deactivateRecursive {
        inline seq regions -> deactivateRecursive

        if (parent.activeState == Self) {
            parent.activeState := Nothing
            inline seq exitActions -> main
        }
    }

    tran exitRecursive(commonRegion : Region) {
        inline seq exitActions -> main

        parent.activeState := Nothing

        inline if (commonRegion != parent) {
            inline parentState.exitRecursive(commonRegion)
        }
    }

    tran exit(commonRegion : Region) {
        inline exitRecursive(commonRegion)

        inline seq regions -> deactivateRecursive
    }

    tran enterRecursive(commonRegion : Region) {
        inline if (commonRegion != parent) {
            inline parentState.enterRecursive(commonRegion)
        }

        parent.activeState := Self

        inline seq entryActions -> main
    }

    tran enter(commonRegion : Region) {
        inline enterRecursive(commonRegion)

        inline seq regions -> activateRecursive
    }

    tran fireTransitions {
        inline seq regions -> fireTransitions
    }
}

type AbstractTransition {
    reference commonRegion : Region[1..1]
    reference to : State[1..1]

    virtual tran { }
}

type EntryTransition : AbstractTransition {
    override tran {
        inline to.enter(commonRegion)
    }
}

type Transition : AbstractTransition {
    reference from : State[0..1]

    feature trigger : Trigger
    feature actions : Action[0..*]
    feature guards : Guard[0..*]

    tran {
        inline seq guards -> main
        inline trigger.isTriggered()
        inline from.isActive()

        inline from.exit(commonRegion)
        inline seq actions -> main
        inline to.enter(commonRegion)
    }
}
