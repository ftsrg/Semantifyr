type Statechart : AtomicComponent {
    feature regions : Region[0..*]
    feature transitions : Transition[0..*]
}

type Region {
    var activeState : State // dynamic enum literal setting?

    feature states : State[0..*]
    feature entryState :> states : State
}

type State {
    feature entryActions : Action[0..*]
    feature exitActions : Action[0..*]
    feature regions : Region[0..*]
}

abstract type Transition {
    feature from : State
    feature to : State

    feature actions : Action[0..*]

    main tran(region : Region) {
        inline from.deactivateTo(region)
        inline to.activateFrom(region)
    }
}

type EntryTransition : Transition {
    feature :> from : EntryState
}

type TriggeredTransition : Transition {
    feature trigger : Trigger
}
