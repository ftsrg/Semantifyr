type GroundStation : Statechart {
    feature connection :> ports : DataSource_Conjugated
    feature control :> ports : StationControl_Conjugated

    feature pingTimeout :> timeout : Timeout
    feature autoStart :> timeout : Timeout

    feature main :> regions : Region
		feature entry :> initial : EntryState

        feature idle :> states : State {
            feature :> entryAction : SetTimeoutAction {
                ref feature :> timeout = autoStart
                amount = 15
                units = TimeUnits.Seconds
            }
        }
		feature operation :> states : State {
            feature :> entryAction : RaiseEventAction {
                ref feature :> event = connection.ping
            }
            feature :> entryAction : SetTimeoutAction {
                ref feature :> timeout = autoStart
                amount = 15
                units = TimeUnits.Seconds
            }

			feature receiveData :> regions {
			    feature entry :> initial : EntryState
			    feature waiting :> states : State
			}
		}
	}

	feature :> transitions : EntryTransition {
		ref feature :> from = main.entry
		ref feature :> to = main.idle
	}
	feature :> transitions : TriggeredTransition {
		ref feature :> from = main.idle
		ref feature :> to = main.operation
		feature :> trigger : EventTrigger {
		    ref feature :> event = control.start
        }
	}
	feature :> transitions : TriggeredTransition {
		ref feature :> from := Idle
		ref feature :> to := Operation
		ref feature :> trigger := TimeoutTrigger(autoStart)
	}
	feature :> transitions : TriggeredTransition {
		ref feature :> from := Operation
		ref feature :> to := Operation
		ref feature :> trigger := TimeoutTrigger(pingTimeout)
	}
	feature :> transitions : TriggeredTransition {
		ref feature :> from := Operation
		ref feature :> to := Idle
		ref feature :> trigger := EventTrigger(control.shutdown)
	}
	feature :> transitions : EntryTransition {
		ref feature :> from := Entry2
		ref feature :> to := Waiting
	}
	feature :> transitions : TriggeredTransition {
		ref feature :> from := Waiting
		ref feature :> to := Waiting
		ref feature :> trigger := EventTrigger(connection.data)
	}
}
