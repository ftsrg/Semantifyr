type GroundStation : Statechart {
	ports += connection : DataSource // requires
	ports += control : StationControl // requires

	triggers += pingTimeout : TimeoutTrigger
	triggers += autoStart : TimeoutTrigger

	regions += Main : Region {
		initial := Entry1 : State();

		states += Idle : State {
			entryAction := SetTimeoutAction(autoStart, 15, TimeUnits.Seconds) // autoStart.set(15, TimeUnits.Seconds)
		}
		states += Operation : State {
			entryAction += RaiseEventAction(connection.ping) // connection.ping.raise
			entryAction += SetTimeoutAction(pingTimeout, 10, TimeUnits.Seconds) // pingTimeout.set(10, TimeUnits.Seconds)
			regions += ReceiveData : Region {
				initial := Entry2 : State
				states := Waiting : State
			}
		}
	}

	transitions += EntryTransition {
		from := Entry1;
		to := Idle;
	}
	transitions += TriggeredTransition {
		from := Idle;
		to := Operation;
		trigger := control.start;
	}
	transitions += TriggeredTransition {
		from := Idle;
		to := Operation;
		trigger := autoStart;
	}
	transitions += TriggeredTransition {
		from := Operation;
		to := Operation;
		trigger := pingTimeout;
	}
	transitions += TriggeredTransition {
		from := Operation;
		to := Idle;
		trigger := control.shutdown;
	}
	transitions += EntryTransition {
		from := Entry2;
		to := Waiting;
	}
	transitions += TriggeredTransition {
		from := Waiting;
		to := Waiting;
		trigger := connection.data;
	}
}
