type GroundStation : Statechart {
	ports += connection : DataSource_Conjugated // requires
	ports += control : StationControl_Conjugated // requires

	timeout += pingTimeout : Timeout
	timeout += autoStart : Timeout

	regions += Main : Region {
		initial := Entry1 : State();

		states += Idle : State {
			entryAction := SetTimeoutAction(autoStart, 15, TimeUnits.Seconds) // autoStart.set(15, TimeUnits.Seconds)
		}
		states += Operation : State {
			entryAction += RaiseEventAction(connection.ping) // connection.ping.raise
			entryAction += SetTimeoutAction(pingTimeout, 10, TimeUnits.Seconds) // pingTimeout.set(10, TimeUnits.Seconds)
			regions += ReceiveData : Region {
				initial := Entry2 : State
				states := Waiting : State
			}
		}
	}

	transitions += EntryTransition {
		from := Entry1
		to := Idle
	}
	transitions += TriggeredTransition {
		from := Idle
		to := Operation
		trigger := EventTrigger(control.start)
	}
	transitions += TriggeredTransition {
		from := Idle
		to := Operation
		trigger := TimeoutTrigger(autoStart)
	}
	transitions += TriggeredTransition {
		from := Operation
		to := Operation
		trigger := TimeoutTrigger(pingTimeout)
	}
	transitions += TriggeredTransition {
		from := Operation
		to := Idle
		trigger := EventTrigger(control.shutdown)
	}
	transitions += EntryTransition {
		from := Entry2
		to := Waiting
	}
	transitions += TriggeredTransition {
		from := Waiting
		to := Waiting
		trigger := EventTrigger(connection.data)
	}
}
