abstract type Component {
    feature ports : Port[0..*] // input ports? output ports? events?
}

type AtomicComponent : Component {
}

type CompositeComponent : Component {
    feature components : Component[0..*]
    feature channels : Channel[0..*]
}

type CascadeComponent : CompositeComponent {
    tran {
        inline for (component in components) {
            inline component //.execute()
            seq inline channels //Channel::execute
        }

        seq inline ports Port::reset // should be output ports ..
    }
}

type Channel {
    feature from : Port<T>
    feature to : ConjugatedPort<T>

    tran {
        inline from.forwardTo(to)
    }
}

type RendezvousChannel : Channel { // basically a BufferedChannel with 0 capacity
    tran {
        // forward events from -> to
    }
}

type BufferedChannel<T : Port>(
    val capacity : Int
) : Channel {
    var buffer : T[capacity]
    // how to know which events to store? generic type?

    tran {
        // forward events from -> buffer -> to
    }
}
