type Spacecraft : Statechart {
	ports += connection : DataSource // provides

	var batteryVariable : Integer := 100
	var recharging : Boolean := false
	var data : Integer := 100

	triggers += rechargeTimeout : TimeoutTrigger
	triggers += consumeTimeout : TimeoutTrigger
	triggers += transmitTimeout : TimeoutTrigger

	regions += Communication : Region {
		initial := Entry1 : State

		states += WaitingPing : State
		states += Transmitting : State {
			regions += SendData : Region {
				initial := entry3 : State
				states := sending : State {
					entryAction += transmitTimeout.set(1500, TimeUnits.Milliseconds)
				}
			}
			regions += ConsumePower : Region {
				initial := entry4 : State
				states := consuming : State {
					entryAction += consumeTimeout.set(1, TimeUnits.Seconds)
				}
			}
		}
	}

	regions += Battery : Region {
		initial := Entry2 : State

		states += NotRecharging : State {
			entryAction := recharging.set(false)
		}
		states += Recharging : State {
			entryAction += [_recharging] := true
			entryAction += rechargeTimeout.set(10, TimeUnits.Seconds)
		}
	}

	transitions += EntryTransition {
		from := Entry1;
		to := WaitingPing;
	}
	transitions += TriggeredTransition {
		from := WaitingPing;
		to := Transmitting;
		trigger := connection.ping;
		guard := [recharging] == false
	}
	transitions += EntryTransition {
		from := Entry3;
		to := Sending;
	}
	transitions += TriggeredTransition {
		from := Sending;
		to := Sending;
		trigger := transmitTimeout;
		guard := [data] > 1 and [batteryVariable] >= 40
		actions += [data] := [data] - 1
		actions += RaiseEventAction(connection.data) // connection.data.raise
	}
	transitions += EntryTransition {
		from := Entry4;
		to := Consuming;
	}
	transitions += TriggeredTransition {
		from := Consuming;
		to := Consuming;
		trigger := consumeTimeout
		guard := [batteryVariable] >= 40
		actions += [batteryVariable] := [batteryVariable] - 1
	}
	transitions += TriggeredTransition {
		from := Transmitting;
		to := WaitingPing;
		trigger := consumeTimeout
		guard := [batteryVariable] < 40
	}
	transitions += TriggeredTransition {
		from := Transmitting;
		to := WaitingPing;
		trigger := transmitTimeout
		guard := [data] <= 1 or [batteryVariable] < 40
	}
	transitions += EntryTransition {
		from := Entry2;
		to := NotRecharging;
	}
	transitions += TriggeredTransition {
		from := NotRecharging;
		to := Recharging;
		trigger := consumeTimeout
		guard := [batteryVariable] < 80
	}
	transitions += TriggeredTransition {
		from := Recharging;
		to := Recharging;
		trigger := rechargeTimeout
		guard := [batteryVariable] < 100
		actions += [batteryVariable] := [batteryVariable] + 1;
    }
	transitions += TriggeredTransition {
		from := Recharging;
		to := NotRecharging;
		trigger := rechargeTimeout
		guard := [batteryVariable] == 100
	}
}
