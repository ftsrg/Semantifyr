// var vfm := VerifySystemEnvironment()

// var vfm_statechart := SimpleStatechart()

// var vfm_statechart_control := Controller()

// var vfm_statechart_Main := Region()

// var vfm_statechart_control_start := Event()

// var vfm_statechart_Main_activeState : State

var vfm_statechart_control_start_isActive : Boolean := false

type vfm_statechart_Main_activeState_Type : {
    __Nothing__, Idle, Operation
}
var vfm_statechart_Main_activeState_Value : vfm_statechart_Main_activeState_Type := __Nothing__;

init {
//    inline statechart.init()
//    seq inline entryTransitions Transition::execute
//    seq { inline to.enter() }
//    vfm_statechart_Main.activeState := Self
    vfm_statechart_Main_activeState_Value := Idle;
}

trans {
//    inline statechart.control.havoc()
//    seq inline events Event::havoc
//    havoc (isActive)
    havoc (vfm_statechart_control_start_isActive);

//    inline statechart.execute()
//    choice inline transitions Transition::execute with-default
//    seq inline ports Port::reset
//    choice {
//        assume (trigger.isTriggered)
//
//        inline from.exit()
//        inline to.enter()
//    } or {
//        assume (default)
//    }
//    seq inline events Event::reset

    choice {
        assume (vfm_statechart_control_start_isActive)

        vfm_statechart_Main_activeState_Value := __Nothing__;
        vfm_statechart_Main_activeState_Value := Operation;
    } else {
        // NO_OP
    }

    vfm_statechart_control_start_isActive := false;
}

env { } // required

prop {
//    statechart.Operation.isActive
//    vfm_statechart_Main.activeState == Self
    !vfm_statechart_Main_activeState_Value == Operation;
}
