/*
 * SPDX-FileCopyrightText: 2023-2024 The Semantifyr Authors
 *
 * SPDX-License-Identifier: EPL-2.0
 */

package Test

import Statecharts
import Components
import Triggers
import Actions
import Events

type LeaderStatechart : Statechart {
    containment fireEvent :> inputEvents : Event
    containment stopEvent :> inputEvents : Event
    containment startEvent :> outputEvents : Event

    containment Main :> regions : Region {
       containment et1 :> entryTransitions : EntryTransition {
            reference ::> to : State = Idle
        }
        containment Idle :> states : State
        containment idleToOperational :> transitions : Transition {
            reference ::> from : State = Idle
            reference ::> to : State = Operational
            containment t1Trigger :> trigger : EventTrigger {
                reference ::> event : Event = fireEvent
            }
            containment t1Action :> actions : RaiseEventAction {
                reference ::> event : Event = startEvent
            }
        }
        containment operationalToIdle :> transitions : Transition {
            reference ::> from : State = Operational
            reference ::> to : State = Idle
            containment t2Trigger :> trigger : EventTrigger {
                reference ::> event : Event = stopEvent
            }
        }
        containment Operational :> states : State
    }
}

type WorkerStatechart : Statechart {
    containment startEvent :> inputEvents : Event

    containment Main :> regions : Region {
        containment et :> entryTransitions : EntryTransition {
            reference ::> to : State = Idle
        }
        containment Idle :> states : State
        containment idleToOperational :> transitions : Transition {
            reference ::> from : State = Idle
            reference ::> to : State = Operational
            containment t1Trigger :> trigger : EventTrigger {
                reference ::> event : Event = startEvent
            }
        }
        containment Operational :> states : State
    }
}

type System : SyncComponent {
    containment leader :> components : LeaderStatechart
    containment worker :> components : WorkerStatechart
    containment startChannel :> channels : Channel {
        reference ::> inputEvent : Event = leader.startEvent
        reference ::> outputEvent : Event = worker.startEvent
    }
}

abstract target SimpleMission {
    containment system : System

    init {
        inline system.init()
    }

    tran {
        // simulating the environment
        havoc (system.leader.fireEvent.isActive)
        havoc (system.leader.stopEvent.isActive)
        // executing the system
        inline system.main()
    }
}

target Mission : SimpleMission {
    prop {
        system.worker.Main.activeState != system.worker.Main.Operational
    }
}

target LeaderIdle_Unsafe : SimpleMission {
    prop {
        ! (system.leader.Main.activeState == system.leader.Main.Idle)
    }
}

target LeaderOperational_Unsafe : SimpleMission {
    prop {
        ! (system.leader.Main.activeState == system.leader.Main.Operational)
    }
}

target WorkerIdle_Unsafe : SimpleMission {
    prop {
        ! (system.worker.Main.activeState == system.worker.Main.Idle)
    }
}

target WorkerOperational_Unsafe : SimpleMission {
    prop {
        ! (system.worker.Main.activeState == system.worker.Main.Operational)
    }
}
