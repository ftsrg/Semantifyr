/*
 * SPDX-FileCopyrightText: 2023-2024 The Semantifyr Authors
 *
 * SPDX-License-Identifier: EPL-2.0
 */

grammar hu.bme.mit.semantifyr.oxsts.lang.Oxsts with org.eclipse.xtext.common.Terminals

import "http://www.bme.hu/mit/2023/oxsts" 
import "http://www.eclipse.org/emf/2002/Ecore" as Ecore

Package:
	'package' name=ID
	(
		  types += TypeLike
		| enums += Enum
		| imports += Import
		| patterns += Pattern
        | instances += Instance
        | features += Feature
	)*
;

Import:
    'import' package=[Package]
;

Property:
	  NamedProperty
	| NamelessProperty
;

NamedProperty returns Property:
	'prop' name=ID '{'
		invariant=Expression
	'}'
;

NamelessProperty returns Property:
	'prop' '{'
		invariant=Expression
	'}'
;

Enum: 
	'enum' name=ID '{'
		literals+=EnumLiteral (',' literals+=EnumLiteral)* (',')?
	'}'
;

EnumLiteral:
	name=ID
;

TypeLike returns Type:
    Type
    | Target
;

Type:
	(abstract?='abstract')? 'type' name=ID (':' supertype=[Type|FQN])? ('{'
		(
			variables+=Variable
			| features+=Feature
			| initTransition+=InitTransition
			| transitions+=NamedTransition
			| mainTransition+=MainTransition
			| havocTransition+=HavocTransition
			| properties+=Property
		)*
	'}')?
;

Target:
	(abstract?='abstract')? 'target' name=ID (':' supertype=[Type|FQN])? ('{'
		(
			variables+=Variable
			| features+=Feature
			| initTransition+=InitTransition
			| transitions+=NamedTransition
			| mainTransition+=MainTransition
			| havocTransition+=HavocTransition
			| properties+=Property
		)*
	'}')?
;

NamedTransition returns Transition:
	TransitionModifier 'tran' name=ID TransitionBody
;

fragment NamelessTransition returns Transition:
	TransitionBody
;

HavocTransition returns Transition:
	TransitionModifier 'havoc' NamelessTransition
;

MainTransition returns Transition:
	TransitionModifier 'tran' NamelessTransition
;

InitTransition returns Transition:
	TransitionModifier 'init' NamelessTransition
;

fragment TransitionModifier returns Transition:
	(virtual?='virtual' | override?='override')?
;

fragment TransitionBody returns Transition:
	(
        '('
            (
                parameters+=Parameter
                (',' parameters+=Parameter)*
                (',')?
            )?
        ')'
	)?
	operation+=SequenceOperation
	(
		'or' operation+=SequenceOperation
	)*
;

Parameter: 
	name=ID ':' type=[Type|FQN]
;


Operation:
	   HavocOperation
	 | ChoiceOperation
	 | SequenceOperation
	 | AssumptionOperation
	 | InlineOperation
	 | AssignmentOperation
	 | IfOperation
;

SequenceOperation:
    {SequenceOperation}
	'{'
		(operation+=Operation)*
	'}'
;

HavocOperation:
	'havoc' '(' referenceExpression=ReferenceExpression ')'
;

ChoiceOperation:
	'choice' operation+=SequenceOperation
	(
		'or' operation+=SequenceOperation
	)*
	(
		'else' else=SequenceOperation
	)?
;

AssumptionOperation: 
	'assume' '(' expression=Expression ')'
;

IfOperation: 
	'if' '(' guard=Expression ')'
	body = SequenceOperation
	(
		'else' else=SequenceOperation
	)?
;

InlineOperation: 
	InlineCall
	| InlineChoice
	| InlineSeq
	| InlineIfOperation
;

InlineChoice: 
	'inline' 'choice' feature=ReferenceExpression '->' transition=ReferenceExpression 
	(
		'else' else=SequenceOperation
	)?
;

InlineSeq: 
	'inline' 'seq' feature=ReferenceExpression '->' transition=ReferenceExpression
;

InlineCall: 
	'inline' reference=ReferenceExpression '('
		(
            parameterBindings+=ParameterBinding
            (',' parameterBindings+=ParameterBinding)* (',')?
		)?
	')'
;

ParameterBinding: 
	expression=Expression
;


InlineIfOperation: 
	'inline' 'if' '(' guard=Expression ')'
	body = SequenceOperation
	(
		'else' else=SequenceOperation
	)?
;


AssignmentOperation: 
	reference=ReferenceExpression ':=' expression=Expression
;



Variable:
	(control ?= 'ctrl')? 'var' name=ID ':' typing=Typing (optional?='[0..1]' | '[1..1]')? ('=' expression=Expression)?
;

Feature returns Feature:
	ActualFeature
	| Containment
	| Reference
	| Derived
;

fragment FeatureDeclaration returns Feature:
	(
	    name=ID
	    | ((name=ID)? '::>' redefines=[Feature|FQN])
    )
    (':>' subsets+=[Feature|FQN])?
    ':' typing=Typing
    (multiplicity=Multiplicity)?
;

ActualFeature returns Feature:
	'feature' FeatureDeclaration
;

Containment:
    'containment' FeatureDeclaration
    (
        '{'
            (
                features+=Feature
                | initTransition+=InitTransition
                | transitions+=NamedTransition
                | mainTransition+=MainTransition
                | havocTransition+=HavocTransition
            )*
        '}'
    )?
;

Reference:
	'reference' FeatureDeclaration ('=' expression=Expression)?
;

Derived:
	'derived' 'reference' FeatureDeclaration 'as' 'pattern' pattern=[Pattern|FQN]
;

Multiplicity: 
	OptionalMultiplicity
	| OneMultiplicity
	| ManyMultiplicity
	| SomeMultiplicity
;

OptionalMultiplicity: 
	{OptionalMultiplicity} '[0..1]'
;

OneMultiplicity: 
	{OneMultiplicity} '[1..1]'
;

ManyMultiplicity: 
	{ManyMultiplicity} '[0..*]'
;

SomeMultiplicity:
	{SomeMultiplicity} '[1..*]'
;

Typing:
    DataType
    | ReferenceTyping
;

DataType: 
	IntegerType 
	| BooleanType
;

IntegerType: 
	{IntegerType} 'Integer'
;

BooleanType: 
	{BooleanType} 'Boolean'
;

ReferenceTyping:
    {ReferenceTyping} reference=ChainReferenceExpression
;

// Instance

Instance:
    'instance' ':' containment=[Containment]
    (
        '{'
            (
                children+=Instance
                | associations+=Association
            )*
        '}'
    )?
;

Association:
    'association' feature=[Feature] '->' '(' instances+=[Instance] (',' instances+=[Instance])* ','? ')'
;

// Patterns

Pattern:
    'pattern' name=ID '('
        parameters+=Parameter
        (',' parameters+=Parameter)*
        (',')?
    ')'
    patternBodies += PatternBody
    ('or' patternBodies += PatternBody)*
;

PatternBody:
    '{'
        (constraints += Constraint)*
    '}'
;

Constraint:
    TypeConstraint
    | FeatureConstraint
    | PatternConstraint
;

PatternVariable:
    name=ID
;

TypeConstraint:
    (negated?='neg')? type=[Type|FQN] '(' variables+=PatternVariable ')'
;

FeatureConstraint:
    (negated?='neg')? type=[Type|FQN] '.' feature=[Feature] '(' variables+=PatternVariable ',' variables+=PatternVariable ')'
;

PatternConstraint:
    (negated?='neg')? 'find' pattern=[Pattern|FQN] (transitiveClosure = TransitiveClosureKind)? '('
        variables+=PatternVariable
        (',' variables+=PatternVariable)*
        (',')?
    ')'
;

enum TransitiveClosureKind:
    WithoutSelf = '+' | IncludeSelf = '*'
;

// Expressions

Expression: 
	OperatorExpression
;


// Operator expressions

OperatorExpression returns Expression:
	OrOperator
;

OrOperator returns Expression: 
	AndOperator ({OrOperator.operands+=current} '||' operands+=AndOperator)*
;

AndOperator returns Expression: 
	PlusOperator ({AndOperator.operands+=current} '&&' operands+=PlusOperator)*
;

PlusOperator returns Expression: 
	MinusOperator ({PlusOperator.operands+=current} '+' operands+=MinusOperator)*
;

MinusOperator returns Expression: 
	EqualityOperator ({MinusOperator.operands+=current} '-' operands+=EqualityOperator)*
;

EqualityOperator returns Expression: 
	InequalityOperator ({EqualityOperator.operands+=current} '==' operands+=InequalityOperator)*
;

InequalityOperator returns Expression: 
	LessThanOperator ({InequalityOperator.operands+=current} '!=' operands+=LessThanOperator)*
;

LessThanOperator returns Expression:
	LessThanOrEqualsOperator ({LessThanOperator.operands+=current} '<' operands+=LessThanOrEqualsOperator)*
;

LessThanOrEqualsOperator returns Expression:
	GreaterThanOperator ({LessThanOrEqualsOperator.operands+=current} '<=' operands+=GreaterThanOperator)*
;

GreaterThanOperator returns Expression:
	GreaterThanOrEqualsOperator ({GreaterThanOperator.operands+=current} '>' operands+=GreaterThanOrEqualsOperator)*
;

GreaterThanOrEqualsOperator returns Expression:
	UnaryOperator ({GreaterThanOrEqualsOperator.operands+=current} '>=' operands+=UnaryOperator)*
;

UnaryOperator returns Expression:
	NotOperator
	| PrimaryExpression
;

NotOperator returns NotOperator: 
	{NotOperator} => ('not' | '!') operands+=UnaryOperator
;

// Reference expressions

PrimaryExpression returns Expression:
	  ReferenceExpression
	| LiteralExpression
	| '(' Expression ')'
;

ReferenceExpression returns ReferenceExpression: 
	ChainReferenceExpression
;

ChainReferenceExpression: 
	chains+=ChainingExpression
	(
		'.' chains+=ChainingExpression
	)*
;

ChainingExpression: 
	ImplicitTransitionExpression
	| DeclarationReferenceExpression
	| SelfReference
	| NothingReference
;

SelfReference:
	{SelfReference} 'Self'
;

NothingReference:
	{NothingReference} 'Nothing'
;


ImplicitTransitionExpression: 
	InitTransitionExpression
	| HavocTransitionExpression
	| MainTransitionExpression
;

InitTransitionExpression: 
	{InitTransitionExpression} 'init'
;

HavocTransitionExpression: 
	{HavocTransitionExpression} 'havoc'
;

MainTransitionExpression: 
	{MainTransitionExpression} 'main'
;

DeclarationReferenceExpression: 
	element=[Element|FQN]
;

FQN:
    ID ('::' ID)*
;

// Literal expressions

LiteralExpression:
	   LiteralBoolean
	 | LiteralInteger
;

LiteralBoolean:
	value = BooleanValue
;

LiteralInteger:
	value = INT
;

BooleanValue returns Ecore::EBoolean:
	'true' | 'false'
;
