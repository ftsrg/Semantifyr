/*
 * SPDX-FileCopyrightText: 2023-2024 The Semantifyr Authors
 *
 * SPDX-License-Identifier: EPL-2.0
 */

type $Mission$crossroad$controller$Main$states$$type : {
    $Mission$crossroad$controller$Main$Operating$$literal,
    $Mission$crossroad$controller$Main$Interrupted$$literal,
    $Nothing$$literal
}
type $Mission$crossroad$trafficLightA$Main$states$$type : {
    $Mission$crossroad$trafficLightA$Main$Normal$$literal,
    $Mission$crossroad$trafficLightA$Main$Interrupted$$literal,
    $Nothing$$literal
}
type $Mission$crossroad$trafficLightB$Main$states$$type : {
    $Mission$crossroad$trafficLightB$Main$Normal$$literal,
    $Mission$crossroad$trafficLightB$Main$Interrupted$$literal,
    $Nothing$$literal
}
type $Mission$crossroad$controller$Main$Operating$OperatingRegion$states$$type : {
    $Mission$crossroad$controller$Main$Operating$OperatingRegion$Init$$literal,
    $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnA$$literal,
    $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingA$$literal,
    $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnB$$literal,
    $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingB$$literal,
    $Nothing$$literal
}
type $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$states$$type : {
    $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Red$$literal,
    $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Green$$literal,
    $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Yellow$$literal,
    $Nothing$$literal
}
type $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$states$$type : {
    $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Black$$literal,
    $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Yellow$$literal,
    $Nothing$$literal
}
type $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$states$$type : {
    $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Red$$literal,
    $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Green$$literal,
    $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Yellow$$literal,
    $Nothing$$literal
}
type $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$states$$type : {
    $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Black$$literal,
    $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Yellow$$literal,
    $Nothing$$literal
}

ctrl var $Mission$crossroad$controller$policeEvent$isActive : boolean = false
ctrl var $Mission$crossroad$controller$policeEventA$isActive : boolean = false
ctrl var $Mission$crossroad$controller$toggleEventA$isActive : boolean = false
ctrl var $Mission$crossroad$controller$policeEventB$isActive : boolean = false
ctrl var $Mission$crossroad$controller$toggleEventB$isActive : boolean = false
var $Mission$crossroad$controller$trafficTimeout$remainingTime : integer = 0
ctrl var $Mission$crossroad$controller$Main$activeState : $Mission$crossroad$controller$Main$states$$type = $Nothing$$literal
ctrl var $Mission$crossroad$trafficLightA$policeEvent$isActive : boolean = false
ctrl var $Mission$crossroad$trafficLightA$toggleEvent$isActive : boolean = false
ctrl var $Mission$crossroad$trafficLightA$displayRedEvent$isActive : boolean = false
ctrl var $Mission$crossroad$trafficLightA$displayYellowEvent$isActive : boolean = false
ctrl var $Mission$crossroad$trafficLightA$displayGreenEvent$isActive : boolean = false
ctrl var $Mission$crossroad$trafficLightA$displayNoneEvent$isActive : boolean = false
var $Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime : integer = 0
ctrl var $Mission$crossroad$trafficLightA$Main$activeState : $Mission$crossroad$trafficLightA$Main$states$$type = $Nothing$$literal
ctrl var $Mission$crossroad$trafficLightB$policeEvent$isActive : boolean = false
ctrl var $Mission$crossroad$trafficLightB$toggleEvent$isActive : boolean = false
ctrl var $Mission$crossroad$trafficLightB$displayRedEvent$isActive : boolean = false
ctrl var $Mission$crossroad$trafficLightB$displayYellowEvent$isActive : boolean = false
ctrl var $Mission$crossroad$trafficLightB$displayGreenEvent$isActive : boolean = false
ctrl var $Mission$crossroad$trafficLightB$displayNoneEvent$isActive : boolean = false
var $Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime : integer = 0
ctrl var $Mission$crossroad$trafficLightB$Main$activeState : $Mission$crossroad$trafficLightB$Main$states$$type = $Nothing$$literal
ctrl var $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState : $Mission$crossroad$controller$Main$Operating$OperatingRegion$states$$type = $Nothing$$literal
ctrl var $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState : $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$states$$type = $Nothing$$literal
ctrl var $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState : $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$states$$type = $Nothing$$literal
ctrl var $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState : $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$states$$type = $Nothing$$literal
ctrl var $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState : $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$states$$type = $Nothing$$literal

trans {
    havoc $Mission$crossroad$controller$policeEvent$isActive;
    $Mission$crossroad$controller$policeEventA$isActive := false;
    $Mission$crossroad$controller$toggleEventA$isActive := false;
    $Mission$crossroad$controller$policeEventB$isActive := false;
    $Mission$crossroad$controller$toggleEventB$isActive := false;
    choice {
        assume ($Mission$crossroad$controller$policeEvent$isActive);
        assume (($Mission$crossroad$controller$Main$activeState == $Mission$crossroad$controller$Main$Operating$$literal));
        $Mission$crossroad$controller$Main$activeState := $Nothing$$literal;
        if (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$Init$$literal)) {
            $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Nothing$$literal;
        }
        if (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnA$$literal)) {
            $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Nothing$$literal;
        }
        if (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingA$$literal)) {
            $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Nothing$$literal;
        }
        if (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnB$$literal)) {
            $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Nothing$$literal;
        }
        if (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingB$$literal)) {
            $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Nothing$$literal;
        }
        $Mission$crossroad$controller$Main$activeState := $Mission$crossroad$controller$Main$Interrupted$$literal;
        $Mission$crossroad$controller$policeEventA$isActive := true;
        $Mission$crossroad$controller$policeEventB$isActive := true;
    } or {
        assume ($Mission$crossroad$controller$policeEvent$isActive);
        assume (($Mission$crossroad$controller$Main$activeState == $Mission$crossroad$controller$Main$Interrupted$$literal));
        $Mission$crossroad$controller$policeEventA$isActive := true;
        $Mission$crossroad$controller$policeEventB$isActive := true;
        $Mission$crossroad$controller$Main$activeState := $Nothing$$literal;
        $Mission$crossroad$controller$Main$activeState := $Mission$crossroad$controller$Main$Operating$$literal;
        $Mission$crossroad$controller$Main$activeState := $Mission$crossroad$controller$Main$Operating$$literal;
        $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Mission$crossroad$controller$Main$Operating$OperatingRegion$Init$$literal;
        $Mission$crossroad$controller$trafficTimeout$remainingTime := 1;
    } or {
        assume (! (((((((($Mission$crossroad$controller$policeEvent$isActive && ($Mission$crossroad$controller$Main$activeState == $Mission$crossroad$controller$Main$Operating$$literal)) && (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$Init$$literal) || ! (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$Init$$literal)))) && (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnA$$literal) || ! (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnA$$literal)))) && (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingA$$literal) || ! (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingA$$literal)))) && (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnB$$literal) || ! (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnB$$literal)))) && (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingB$$literal) || ! (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingB$$literal)))) || ($Mission$crossroad$controller$policeEvent$isActive && ($Mission$crossroad$controller$Main$activeState == $Mission$crossroad$controller$Main$Interrupted$$literal)))));
        choice {
            assume (($Mission$crossroad$controller$Main$activeState == $Mission$crossroad$controller$Main$Operating$$literal));
            choice {
                assume (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0));
                assume (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$Init$$literal));
                $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$controller$toggleEventA$isActive := true;
                $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnA$$literal;
                $Mission$crossroad$controller$trafficTimeout$remainingTime := 2;
            } or {
                assume (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0));
                assume (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnA$$literal));
                $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$controller$toggleEventA$isActive := true;
                $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingA$$literal;
                $Mission$crossroad$controller$trafficTimeout$remainingTime := 1;
            } or {
                assume (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0));
                assume (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingA$$literal));
                $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$controller$toggleEventA$isActive := true;
                $Mission$crossroad$controller$toggleEventB$isActive := true;
                $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnB$$literal;
                $Mission$crossroad$controller$trafficTimeout$remainingTime := 2;
            } or {
                assume (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0));
                assume (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnB$$literal));
                $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$controller$toggleEventB$isActive := true;
                $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingB$$literal;
                $Mission$crossroad$controller$trafficTimeout$remainingTime := 1;
            } or {
                assume (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0));
                assume (($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingB$$literal));
                $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$controller$toggleEventB$isActive := true;
                $Mission$crossroad$controller$toggleEventA$isActive := true;
                $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnA$$literal;
                $Mission$crossroad$controller$trafficTimeout$remainingTime := 2;
            } or {
                assume (! ((((((($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$Init$$literal)) || (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnA$$literal))) || (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingA$$literal))) || (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnB$$literal))) || (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingB$$literal)))));
            }
        } or {
            assume (! ((($Mission$crossroad$controller$Main$activeState == $Mission$crossroad$controller$Main$Operating$$literal) && ((((((($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$Init$$literal)) || (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnA$$literal))) || (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingA$$literal))) || (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnB$$literal))) || (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingB$$literal))) || ! ((((((($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$Init$$literal)) || (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnA$$literal))) || (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingA$$literal))) || (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$TrafficOnB$$literal))) || (($Mission$crossroad$controller$trafficTimeout$remainingTime <= 0) && ($Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState == $Mission$crossroad$controller$Main$Operating$OperatingRegion$StoppingB$$literal))))))));
        }
    }
    $Mission$crossroad$controller$policeEvent$isActive := false;
    $Mission$crossroad$trafficLightA$displayRedEvent$isActive := false;
    $Mission$crossroad$trafficLightA$displayYellowEvent$isActive := false;
    $Mission$crossroad$trafficLightA$displayGreenEvent$isActive := false;
    $Mission$crossroad$trafficLightA$displayNoneEvent$isActive := false;
    choice {
        assume ($Mission$crossroad$trafficLightA$policeEvent$isActive);
        assume (($Mission$crossroad$trafficLightA$Main$activeState == $Mission$crossroad$trafficLightA$Main$Normal$$literal));
        $Mission$crossroad$trafficLightA$Main$activeState := $Nothing$$literal;
        if (($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Red$$literal)) {
            $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState := $Nothing$$literal;
        }
        if (($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Green$$literal)) {
            $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState := $Nothing$$literal;
        }
        if (($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Yellow$$literal)) {
            $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState := $Nothing$$literal;
        }
        $Mission$crossroad$trafficLightA$Main$activeState := $Mission$crossroad$trafficLightA$Main$Interrupted$$literal;
        $Mission$crossroad$trafficLightA$Main$activeState := $Mission$crossroad$trafficLightA$Main$Interrupted$$literal;
        $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState := $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Black$$literal;
        $Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime := 1;
        $Mission$crossroad$trafficLightA$displayNoneEvent$isActive := true;
    } or {
        assume ($Mission$crossroad$trafficLightA$policeEvent$isActive);
        assume (($Mission$crossroad$trafficLightA$Main$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$$literal));
        $Mission$crossroad$trafficLightA$Main$activeState := $Nothing$$literal;
        if (($Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Black$$literal)) {
            $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState := $Nothing$$literal;
        }
        if (($Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Yellow$$literal)) {
            $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState := $Nothing$$literal;
        }
        $Mission$crossroad$trafficLightA$Main$activeState := $Mission$crossroad$trafficLightA$Main$Normal$$literal;
        $Mission$crossroad$trafficLightA$Main$activeState := $Mission$crossroad$trafficLightA$Main$Normal$$literal;
        $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState := $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Red$$literal;
        $Mission$crossroad$trafficLightA$displayRedEvent$isActive := true;
    } or {
        assume (! (((((($Mission$crossroad$trafficLightA$policeEvent$isActive && ($Mission$crossroad$trafficLightA$Main$activeState == $Mission$crossroad$trafficLightA$Main$Normal$$literal)) && (($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Red$$literal) || ! (($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Red$$literal)))) && (($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Green$$literal) || ! (($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Green$$literal)))) && (($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Yellow$$literal) || ! (($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Yellow$$literal)))) || ((($Mission$crossroad$trafficLightA$policeEvent$isActive && ($Mission$crossroad$trafficLightA$Main$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$$literal)) && (($Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Black$$literal) || ! (($Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Black$$literal)))) && (($Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Yellow$$literal) || ! (($Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Yellow$$literal)))))));
        choice {
            assume (($Mission$crossroad$trafficLightA$Main$activeState == $Mission$crossroad$trafficLightA$Main$Normal$$literal));
            choice {
                assume ($Mission$crossroad$trafficLightA$toggleEvent$isActive);
                assume (($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Red$$literal));
                $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState := $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Green$$literal;
                $Mission$crossroad$trafficLightA$displayGreenEvent$isActive := true;
            } or {
                assume ($Mission$crossroad$trafficLightA$toggleEvent$isActive);
                assume (($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Green$$literal));
                $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState := $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Yellow$$literal;
                $Mission$crossroad$trafficLightA$displayYellowEvent$isActive := true;
            } or {
                assume ($Mission$crossroad$trafficLightA$toggleEvent$isActive);
                assume (($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Yellow$$literal));
                $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState := $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Red$$literal;
                $Mission$crossroad$trafficLightA$displayRedEvent$isActive := true;
            } or {
                assume (! (((($Mission$crossroad$trafficLightA$toggleEvent$isActive && ($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Red$$literal)) || ($Mission$crossroad$trafficLightA$toggleEvent$isActive && ($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Green$$literal))) || ($Mission$crossroad$trafficLightA$toggleEvent$isActive && ($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Yellow$$literal)))));
            }
        } or {
            assume (($Mission$crossroad$trafficLightA$Main$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$$literal));
            choice {
                assume (($Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime <= 0));
                assume (($Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Black$$literal));
                $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState := $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Yellow$$literal;
                $Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime := 1;
                $Mission$crossroad$trafficLightA$displayYellowEvent$isActive := true;
            } or {
                assume (($Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime <= 0));
                assume (($Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Yellow$$literal));
                $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState := $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Black$$literal;
                $Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime := 1;
                $Mission$crossroad$trafficLightA$displayNoneEvent$isActive := true;
            } or {
                assume (! (((($Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime <= 0) && ($Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Black$$literal)) || (($Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime <= 0) && ($Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Yellow$$literal)))));
            }
        } or {
            assume (! (((($Mission$crossroad$trafficLightA$Main$activeState == $Mission$crossroad$trafficLightA$Main$Normal$$literal) && (((($Mission$crossroad$trafficLightA$toggleEvent$isActive && ($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Red$$literal)) || ($Mission$crossroad$trafficLightA$toggleEvent$isActive && ($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Green$$literal))) || ($Mission$crossroad$trafficLightA$toggleEvent$isActive && ($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Yellow$$literal))) || ! (((($Mission$crossroad$trafficLightA$toggleEvent$isActive && ($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Red$$literal)) || ($Mission$crossroad$trafficLightA$toggleEvent$isActive && ($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Green$$literal))) || ($Mission$crossroad$trafficLightA$toggleEvent$isActive && ($Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Yellow$$literal)))))) || (($Mission$crossroad$trafficLightA$Main$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$$literal) && (((($Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime <= 0) && ($Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Black$$literal)) || (($Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime <= 0) && ($Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Yellow$$literal))) || ! (((($Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime <= 0) && ($Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Black$$literal)) || (($Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime <= 0) && ($Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightA$Main$Interrupted$InterruptedRegion$Yellow$$literal)))))))));
        }
    }
    $Mission$crossroad$trafficLightA$policeEvent$isActive := false;
    $Mission$crossroad$trafficLightA$toggleEvent$isActive := false;
    $Mission$crossroad$trafficLightB$displayRedEvent$isActive := false;
    $Mission$crossroad$trafficLightB$displayYellowEvent$isActive := false;
    $Mission$crossroad$trafficLightB$displayGreenEvent$isActive := false;
    $Mission$crossroad$trafficLightB$displayNoneEvent$isActive := false;
    choice {
        assume ($Mission$crossroad$trafficLightB$policeEvent$isActive);
        assume (($Mission$crossroad$trafficLightB$Main$activeState == $Mission$crossroad$trafficLightB$Main$Normal$$literal));
        $Mission$crossroad$trafficLightB$Main$activeState := $Nothing$$literal;
        if (($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Red$$literal)) {
            $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState := $Nothing$$literal;
        }
        if (($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Green$$literal)) {
            $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState := $Nothing$$literal;
        }
        if (($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Yellow$$literal)) {
            $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState := $Nothing$$literal;
        }
        $Mission$crossroad$trafficLightB$Main$activeState := $Mission$crossroad$trafficLightB$Main$Interrupted$$literal;
        $Mission$crossroad$trafficLightB$Main$activeState := $Mission$crossroad$trafficLightB$Main$Interrupted$$literal;
        $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState := $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Black$$literal;
        $Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime := 1;
        $Mission$crossroad$trafficLightB$displayNoneEvent$isActive := true;
    } or {
        assume ($Mission$crossroad$trafficLightB$policeEvent$isActive);
        assume (($Mission$crossroad$trafficLightB$Main$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$$literal));
        $Mission$crossroad$trafficLightB$Main$activeState := $Nothing$$literal;
        if (($Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Black$$literal)) {
            $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState := $Nothing$$literal;
        }
        if (($Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Yellow$$literal)) {
            $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState := $Nothing$$literal;
        }
        $Mission$crossroad$trafficLightB$Main$activeState := $Mission$crossroad$trafficLightB$Main$Normal$$literal;
        $Mission$crossroad$trafficLightB$Main$activeState := $Mission$crossroad$trafficLightB$Main$Normal$$literal;
        $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState := $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Red$$literal;
        $Mission$crossroad$trafficLightB$displayRedEvent$isActive := true;
    } or {
        assume (! (((((($Mission$crossroad$trafficLightB$policeEvent$isActive && ($Mission$crossroad$trafficLightB$Main$activeState == $Mission$crossroad$trafficLightB$Main$Normal$$literal)) && (($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Red$$literal) || ! (($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Red$$literal)))) && (($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Green$$literal) || ! (($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Green$$literal)))) && (($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Yellow$$literal) || ! (($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Yellow$$literal)))) || ((($Mission$crossroad$trafficLightB$policeEvent$isActive && ($Mission$crossroad$trafficLightB$Main$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$$literal)) && (($Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Black$$literal) || ! (($Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Black$$literal)))) && (($Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Yellow$$literal) || ! (($Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Yellow$$literal)))))));
        choice {
            assume (($Mission$crossroad$trafficLightB$Main$activeState == $Mission$crossroad$trafficLightB$Main$Normal$$literal));
            choice {
                assume ($Mission$crossroad$trafficLightB$toggleEvent$isActive);
                assume (($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Red$$literal));
                $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState := $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Green$$literal;
                $Mission$crossroad$trafficLightB$displayGreenEvent$isActive := true;
            } or {
                assume ($Mission$crossroad$trafficLightB$toggleEvent$isActive);
                assume (($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Green$$literal));
                $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState := $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Yellow$$literal;
                $Mission$crossroad$trafficLightB$displayYellowEvent$isActive := true;
            } or {
                assume ($Mission$crossroad$trafficLightB$toggleEvent$isActive);
                assume (($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Yellow$$literal));
                $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState := $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Red$$literal;
                $Mission$crossroad$trafficLightB$displayRedEvent$isActive := true;
            } or {
                assume (! (((($Mission$crossroad$trafficLightB$toggleEvent$isActive && ($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Red$$literal)) || ($Mission$crossroad$trafficLightB$toggleEvent$isActive && ($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Green$$literal))) || ($Mission$crossroad$trafficLightB$toggleEvent$isActive && ($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Yellow$$literal)))));
            }
        } or {
            assume (($Mission$crossroad$trafficLightB$Main$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$$literal));
            choice {
                assume (($Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime <= 0));
                assume (($Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Black$$literal));
                $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState := $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Yellow$$literal;
                $Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime := 1;
                $Mission$crossroad$trafficLightB$displayYellowEvent$isActive := true;
            } or {
                assume (($Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime <= 0));
                assume (($Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Yellow$$literal));
                $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState := $Nothing$$literal;
                $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState := $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Black$$literal;
                $Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime := 1;
                $Mission$crossroad$trafficLightB$displayNoneEvent$isActive := true;
            } or {
                assume (! (((($Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime <= 0) && ($Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Black$$literal)) || (($Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime <= 0) && ($Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Yellow$$literal)))));
            }
        } or {
            assume (! (((($Mission$crossroad$trafficLightB$Main$activeState == $Mission$crossroad$trafficLightB$Main$Normal$$literal) && (((($Mission$crossroad$trafficLightB$toggleEvent$isActive && ($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Red$$literal)) || ($Mission$crossroad$trafficLightB$toggleEvent$isActive && ($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Green$$literal))) || ($Mission$crossroad$trafficLightB$toggleEvent$isActive && ($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Yellow$$literal))) || ! (((($Mission$crossroad$trafficLightB$toggleEvent$isActive && ($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Red$$literal)) || ($Mission$crossroad$trafficLightB$toggleEvent$isActive && ($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Green$$literal))) || ($Mission$crossroad$trafficLightB$toggleEvent$isActive && ($Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState == $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Yellow$$literal)))))) || (($Mission$crossroad$trafficLightB$Main$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$$literal) && (((($Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime <= 0) && ($Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Black$$literal)) || (($Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime <= 0) && ($Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Yellow$$literal))) || ! (((($Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime <= 0) && ($Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Black$$literal)) || (($Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime <= 0) && ($Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$activeState == $Mission$crossroad$trafficLightB$Main$Interrupted$InterruptedRegion$Yellow$$literal)))))))));
        }
    }
    $Mission$crossroad$trafficLightB$policeEvent$isActive := false;
    $Mission$crossroad$trafficLightB$toggleEvent$isActive := false;
    if ($Mission$crossroad$controller$policeEventA$isActive) {
        $Mission$crossroad$trafficLightA$policeEvent$isActive := true;
    }
    if ($Mission$crossroad$controller$toggleEventA$isActive) {
        $Mission$crossroad$trafficLightA$toggleEvent$isActive := true;
    }
    if ($Mission$crossroad$controller$policeEventB$isActive) {
        $Mission$crossroad$trafficLightB$policeEvent$isActive := true;
    }
    if ($Mission$crossroad$controller$toggleEventB$isActive) {
        $Mission$crossroad$trafficLightB$toggleEvent$isActive := true;
    }
    if (($Mission$crossroad$controller$trafficTimeout$remainingTime > 0)) {
        $Mission$crossroad$controller$trafficTimeout$remainingTime := ($Mission$crossroad$controller$trafficTimeout$remainingTime - 1);
    }
    if (($Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime > 0)) {
        $Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime := ($Mission$crossroad$trafficLightA$blinkingTimeout$remainingTime - 1);
    }
    if (($Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime > 0)) {
        $Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime := ($Mission$crossroad$trafficLightB$blinkingTimeout$remainingTime - 1);
    }
}

init {
    $Mission$crossroad$controller$Main$activeState := $Mission$crossroad$controller$Main$Operating$$literal;
    $Mission$crossroad$controller$Main$activeState := $Mission$crossroad$controller$Main$Operating$$literal;
    $Mission$crossroad$controller$Main$Operating$OperatingRegion$activeState := $Mission$crossroad$controller$Main$Operating$OperatingRegion$Init$$literal;
    $Mission$crossroad$controller$trafficTimeout$remainingTime := 1;
    $Mission$crossroad$trafficLightA$Main$activeState := $Mission$crossroad$trafficLightA$Main$Normal$$literal;
    $Mission$crossroad$trafficLightA$Main$activeState := $Mission$crossroad$trafficLightA$Main$Normal$$literal;
    $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$activeState := $Mission$crossroad$trafficLightA$Main$Normal$NormalRegion$Red$$literal;
    $Mission$crossroad$trafficLightA$displayRedEvent$isActive := true;
    $Mission$crossroad$trafficLightB$Main$activeState := $Mission$crossroad$trafficLightB$Main$Normal$$literal;
    $Mission$crossroad$trafficLightB$Main$activeState := $Mission$crossroad$trafficLightB$Main$Normal$$literal;
    $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$activeState := $Mission$crossroad$trafficLightB$Main$Normal$NormalRegion$Red$$literal;
    $Mission$crossroad$trafficLightB$displayRedEvent$isActive := true;
}

env {}

prop {
    true
}
