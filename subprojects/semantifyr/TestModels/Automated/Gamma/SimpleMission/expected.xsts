/*
 * SPDX-FileCopyrightText: 2023-2024 The Semantifyr Authors
 *
 * SPDX-License-Identifier: EPL-2.0
 */

type $Mission$system$leader$Main$states$$type : {
    $Mission$system$leader$Main$Idle$$literal,
    $Mission$system$leader$Main$Operational$$literal,
    $Nothing$$literal
}
type $Mission$system$worker$Main$states$$type : {
    $Mission$system$worker$Main$Idle$$literal,
    $Mission$system$worker$Main$Operational$$literal,
    $Nothing$$literal
}

ctrl var $Mission$system$leader$fireEvent$isActive : boolean = false
ctrl var $Mission$system$leader$stopEvent$isActive : boolean = false
ctrl var $Mission$system$leader$startEvent$isActive : boolean = false
ctrl var $Mission$system$leader$Main$activeState : $Mission$system$leader$Main$states$$type = $Nothing$$literal
ctrl var $Mission$system$worker$startEvent$isActive : boolean = false
ctrl var $Mission$system$worker$Main$activeState : $Mission$system$worker$Main$states$$type = $Nothing$$literal

trans {
    havoc $Mission$system$leader$fireEvent$isActive;
    havoc $Mission$system$leader$stopEvent$isActive;
    $Mission$system$leader$startEvent$isActive := false;
    choice {
        assume ($Mission$system$leader$fireEvent$isActive);
        assume (($Mission$system$leader$Main$activeState == $Mission$system$leader$Main$Idle$$literal));
        $Mission$system$leader$Main$activeState := $Nothing$$literal;
        $Mission$system$leader$startEvent$isActive := true;
        $Mission$system$leader$Main$activeState := $Mission$system$leader$Main$Operational$$literal;
    } or {
        assume ($Mission$system$leader$stopEvent$isActive);
        assume (($Mission$system$leader$Main$activeState == $Mission$system$leader$Main$Operational$$literal));
        $Mission$system$leader$Main$activeState := $Nothing$$literal;
        $Mission$system$leader$Main$activeState := $Mission$system$leader$Main$Idle$$literal;
    } or {
        assume (! ((($Mission$system$leader$fireEvent$isActive && ($Mission$system$leader$Main$activeState == $Mission$system$leader$Main$Idle$$literal)) || ($Mission$system$leader$stopEvent$isActive && ($Mission$system$leader$Main$activeState == $Mission$system$leader$Main$Operational$$literal)))));
    }
    $Mission$system$leader$fireEvent$isActive := false;
    $Mission$system$leader$stopEvent$isActive := false;
    choice {
        assume ($Mission$system$worker$startEvent$isActive);
        assume (($Mission$system$worker$Main$activeState == $Mission$system$worker$Main$Idle$$literal));
        $Mission$system$worker$Main$activeState := $Nothing$$literal;
        $Mission$system$worker$Main$activeState := $Mission$system$worker$Main$Operational$$literal;
    } or {
        assume (! (($Mission$system$worker$startEvent$isActive && ($Mission$system$worker$Main$activeState == $Mission$system$worker$Main$Idle$$literal))));
    }
    $Mission$system$worker$startEvent$isActive := false;
    if ($Mission$system$leader$startEvent$isActive) {
        $Mission$system$worker$startEvent$isActive := true;
    }
}

init {
    $Mission$system$leader$Main$activeState := $Mission$system$leader$Main$Idle$$literal;
    $Mission$system$worker$Main$activeState := $Mission$system$worker$Main$Idle$$literal;
}

env {}

prop {
    ($Mission$system$worker$Main$activeState != $Mission$system$worker$Main$Operational$$literal)
}
