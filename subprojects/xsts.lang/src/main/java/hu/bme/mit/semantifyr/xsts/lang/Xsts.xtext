/*
 * SPDX-FileCopyrightText: 2023-2024 The Semantifyr Authors
 *
 * SPDX-License-Identifier: EPL-2.0
 */

grammar hu.bme.mit.semantifyr.xsts.lang.Xsts with org.eclipse.xtext.common.Terminals

import "http://www.bme.hu/mit/2023/oxsts" 
import "http://www.eclipse.org/emf/2002/Ecore" as Ecore

XSTS:
	(
	    variables += Variable |
	    enums += Enum
    )*
    (
        init=Init
        & transition=Transition
        & (property = Property)?
        & ('env' '{' '}')?
    )
;

Variable:
	(control ?= 'ctrl')? 'var' name=ID ':' typing=Typing ('=' expression=Expression)?
;

Property:
	'prop' '{'
		invariant=Expression
	'}'
;

Enum:
	'type' name=ID ':' '{'
		literals+=EnumLiteral (',' literals+=EnumLiteral)*
	'}'
;

EnumLiteral:
	name=ID
;

Transition:
	'trans' TransitionBody
;

Init returns Transition:
	'init' TransitionBody
;

Env returns Transition:
	'env' TransitionBody
;

fragment TransitionBody returns Transition:
	operation+=SequenceOperation
	(
		'or' operation+=SequenceOperation
	)*
;

Operation:
	   HavocOperation
	 | ChoiceOperation
	 | SequenceOperation
	 | AssumptionOperation
	 | AssignmentOperation
	 | IfOperation
;

SequenceOperation:
    { SequenceOperation }
	'{'
		(operation+=Operation)*
	'}'
;

ChoiceOperation:
	'choice' operation+=SequenceOperation
	(
		'or' operation+=SequenceOperation
	)*
	(
		'else' else=SequenceOperation
	)?
;

IfOperation:
	'if' '(' guard=Expression ')'
	body = SequenceOperation
	(
		'else' else=SequenceOperation
	)?
;

HavocOperation:
	'havoc' referenceExpression=ReferenceExpression ';'
;

AssumptionOperation:
	'assume' '(' expression=Expression ')' ';'
;

AssignmentOperation:
	reference=ReferenceExpression ':=' expression=Expression ';'
;


Typing:
    DataType
    | ReferenceTyping
;

DataType:
	IntegerType
	| BooleanType
;

IntegerType:
	{IntegerType} 'integer'
;

BooleanType:
	{BooleanType} 'boolean'
;

ReferenceTyping:
    {ReferenceTyping} reference=ChainReferenceExpression
;


// Expressions

Expression:
	OperatorExpression
;


// Operator expressions

OperatorExpression returns Expression:
	OrOperator
;

OrOperator returns Expression:
	AndOperator ({OrOperator.operands+=current} '||' operands+=AndOperator)*
;

AndOperator returns Expression:
	PlusOperator ({AndOperator.operands+=current} '&&' operands+=PlusOperator)*
;

PlusOperator returns Expression:
	MinusOperator ({PlusOperator.operands+=current} '+' operands+=MinusOperator)*
;

MinusOperator returns Expression:
	EqualityOperator ({MinusOperator.operands+=current} '-' operands+=EqualityOperator)*
;

EqualityOperator returns Expression:
	InequalityOperator ({EqualityOperator.operands+=current} '==' operands+=InequalityOperator)*
;

InequalityOperator returns Expression:
	LessThanOperator ({InequalityOperator.operands+=current} '!=' operands+=LessThanOperator)*
;

LessThanOperator returns Expression:
	LessThanOrEqualsOperator ({LessThanOperator.operands+=current} '<' operands+=LessThanOrEqualsOperator)*
;

LessThanOrEqualsOperator returns Expression:
	GreaterThanOperator ({LessThanOrEqualsOperator.operands+=current} '<=' operands+=GreaterThanOperator)*
;

GreaterThanOperator returns Expression:
	GreaterThanOrEqualsOperator ({GreaterThanOperator.operands+=current} '>' operands+=GreaterThanOrEqualsOperator)*
;

GreaterThanOrEqualsOperator returns Expression:
	UnaryOperator ({GreaterThanOrEqualsOperator.operands+=current} '>=' operands+=UnaryOperator)*
;

UnaryOperator returns Expression:
	NotOperator
	| PrimaryExpression
;

NotOperator returns NotOperator:
	{NotOperator} => '!' operands+=UnaryOperator
;

// Reference expressions

PrimaryExpression returns Expression:
	  ReferenceExpression
	| LiteralExpression
	| '(' Expression ')'
;

ReferenceExpression returns ReferenceExpression:
	ChainReferenceExpression
;

ChainReferenceExpression:
	chains+=ChainingExpression
;

ChainingExpression:
	DeclarationReferenceExpression
;

DeclarationReferenceExpression:
	element=[Element]
;

// Literal expressions

LiteralExpression:
	   LiteralBoolean
	 | LiteralInteger
;

LiteralBoolean:
	value = BooleanValue
;

LiteralInteger:
	value = SignedInt
;

BooleanValue returns Ecore::EBoolean:
	'true' | 'false'
;

SignedInt returns Ecore::EInt:
    ('-')? INT
;
