/*
 * generated by Xtext 2.31.0
 */
package hu.bme.mit.gamma.oxsts.lang.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import com.google.common.collect.Lists;

import hu.bme.mit.gamma.oxsts.model.oxsts.ChainReferenceExpression;
import hu.bme.mit.gamma.oxsts.model.oxsts.ChainingExpression;
import hu.bme.mit.gamma.oxsts.model.oxsts.DeclarationReferenceExpression;
import hu.bme.mit.gamma.oxsts.model.oxsts.DirectReferenceExpression;
import hu.bme.mit.gamma.oxsts.model.oxsts.Element;
import hu.bme.mit.gamma.oxsts.model.oxsts.Expression;
import hu.bme.mit.gamma.oxsts.model.oxsts.Feature;
import hu.bme.mit.gamma.oxsts.model.oxsts.InlineComposite;
import hu.bme.mit.gamma.oxsts.model.oxsts.Instance;
import hu.bme.mit.gamma.oxsts.model.oxsts.Namespace;
import hu.bme.mit.gamma.oxsts.model.oxsts.OxstsPackage;
import hu.bme.mit.gamma.oxsts.model.oxsts.Type;
import hu.bme.mit.gamma.oxsts.model.oxsts.Package;
import hu.bme.mit.gamma.oxsts.model.oxsts.ReferenceExpression;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class OxstsScopeProvider extends AbstractOxstsScopeProvider {
	
	@Override
	public IScope getScope(EObject context, EReference reference) {	
		if (context instanceof ChainingExpression chain) {
			return calculateChainScope(chain, reference);
		}
		
		/*if (context instanceof Element element) {
			return scopeElement(element, reference);
		}*/
		
		if (
				reference == OxstsPackage.Literals.TYPE__SUPERTYPE ||
				reference == OxstsPackage.Literals.FEATURE__TYPE ||
				reference == OxstsPackage.Literals.INSTANCE__TYPE
				) {
			var _package = EcoreUtil2.getContainerOfType(context, Package.class);
			return Scopes.scopeFor(_package.getTypes(), super.getScope(context, reference));
		}
				
		return scopeElement(context, reference);
	}
	
	protected IScope calculateChainScope(ChainingExpression expression, EReference reference) {
		var chain = EcoreUtil2.getContainerOfType(expression, ChainReferenceExpression.class);
		var index = chain.getChains().indexOf(expression);
		
		if (index <= 0) {
			return scopeElement(chain, reference);
		}

		var lastExpression = chain.getChains().get(index - 1);
		var referencedElement = lastExpression.getElement();
		
		return scopeElement(referencedElement, reference);
	}
	
	protected IScope scopeElement(EObject element, EReference reference) {
		return Scopes.scopeFor(getElements(element), super.getScope(element, reference));
	}
	
	protected List<Element> getElements(EObject element) {
		if (element == null) {
			return List.of();
		}

		var parent = element.eContainer();
		var elements = new ArrayList<Element>();
		elements.addAll(getElements(parent));
				
		if (element instanceof Package _package) {
			elements.addAll(_package.getTypes().stream().map(it -> (Element)it).toList());
		} else if (element instanceof Type type) {
			elements.addAll(getInheritedElements(type));
		} else if (element instanceof Instance instance) {
			elements.addAll(getInheritedElements(instance.getType()));
		} else if (element instanceof Feature feature) {
			elements.addAll(getInheritedElements(feature.getType()));
		} else if (element instanceof InlineComposite inlineComposite) {
			var featureReference = inlineComposite.getFeature();
			var feature = getReferredElement(featureReference);
			elements.addAll(getElements(feature));
		}

		return elements;
	}
	
	protected List<Element> getInheritedElements(Type type) {
		if (type == null) {
			return List.of();
		}
		var elements = EcoreUtil2.eAllOfType(type, Element.class);
		var supertype = type.getSupertype();
		elements.addAll(getInheritedElements(supertype));

		return elements;		
	}
	
	protected Element getReferredElement(ReferenceExpression expression) {
		if (expression instanceof DeclarationReferenceExpression declarationReference) {
			return declarationReference.getElement();
		} else if (expression instanceof ChainReferenceExpression chainReference) {
			return chainReference.getChains().get(chainReference.getChains().size() - 1).getElement();
		} else {
			return null;
		}
	}
	
}
